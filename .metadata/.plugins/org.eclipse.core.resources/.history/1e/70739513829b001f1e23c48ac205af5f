package gui;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import javax.swing.plaf.basic.BasicComboBoxUI;
public class QuanLyNhapHang extends JPanel {
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 242, 242);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
    private static final Font TITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 16);
    
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField searchField;
    private JFormattedTextField fromAmountField;
    private JFormattedTextField toAmountField;
    private JDateChooser fromDateChooser;
    private JDateChooser toDateChooser;
    private JComboBox<String> supplierCombo;
    private JComboBox<String> employeeCombo;
    private JLabel totalRecordsValue;
    private JLabel totalAmountValue;
    
    public QuanLyNhapHang() {
        initComponents();
    }
    
    private void initComponents() {
        setLayout(new BorderLayout(0, 20));
        setBackground(Color.WHITE);
        setBorder(new EmptyBorder(30, 30, 30, 30));
        
        add(createTopPanel(), BorderLayout.NORTH);
        add(createFilterPanel(), BorderLayout.WEST);
        add(createTablePanel(), BorderLayout.CENTER);
    }
    
    private JPanel createTopPanel() {
        JPanel topPanel = new JPanel(new BorderLayout(20, 0));
        topPanel.setBackground(Color.WHITE);
        
        // Left components with search
        JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
        leftPanel.setBackground(Color.WHITE);
        
        searchField = new JTextField();
        searchField.setPreferredSize(new Dimension(220, 35));
        searchField.setFont(CONTENT_FONT);
        
        JButton searchButton = createIconButton("/icon/search.png");
        searchButton.addActionListener(e -> applyFilters());
        
        leftPanel.add(searchField);
        leftPanel.add(searchButton);
        
        // Right components with action buttons
        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        rightPanel.setBackground(Color.WHITE);
        
        JButton addButton = createButton("Thêm phiếu nhập", "/icon/circle-plus.png", true);
        addButton.setBackground(PRIMARY_COLOR);
        addButton.setForeground(Color.WHITE);
        addButton.setPreferredSize(new Dimension(160, 38));
        
        JButton deleteButton = createButton("Xóa", "/icon/trash.png", true);
        deleteButton.addActionListener(e -> deleteSelectedRecords());
        
        JButton aboutButton = createButton("About", "/icon/info.png", true);
        aboutButton.addActionListener(e -> showAboutDialog());
        
        JButton exportButton = createButton("Xuất Excel", "/icon/printer.png", true);
        exportButton.setPreferredSize(new Dimension(160, 38));
        exportButton.addActionListener(e -> exportToExcel());
        
        rightPanel.add(addButton);
        rightPanel.add(deleteButton);
        rightPanel.add(aboutButton);
        rightPanel.add(exportButton);
        
        topPanel.add(leftPanel, BorderLayout.WEST);
        topPanel.add(rightPanel, BorderLayout.EAST);
        
        return topPanel;
    }
    
    private JPanel createFilterPanel() {
        JPanel filterPanel = new JPanel();
        filterPanel.setLayout(new BoxLayout(filterPanel, BoxLayout.Y_AXIS));
        filterPanel.setBackground(CONTENT_COLOR);
        filterPanel.setBorder(BorderFactory.createCompoundBorder(
            new EmptyBorder(0, 0, 0, 20),
            BorderFactory.createCompoundBorder(
                new LineBorder(PRIMARY_COLOR, 1, true),
                new EmptyBorder(20, 20, 20, 20)
            )
        ));
        filterPanel.setPreferredSize(new Dimension(320, 0));

        // Tiêu đề panel
        JLabel titleLabel = new JLabel("Lọc kết quả");
        titleLabel.setFont(TITLE_FONT);
        titleLabel.setForeground(PRIMARY_COLOR);
        titleLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        filterPanel.add(titleLabel);
        filterPanel.add(Box.createVerticalStrut(25));

        // Nhà cung cấp (ComboBox)
        supplierCombo = new JComboBox<>(new String[]{
            "Tất cả",
            "Xưởng may Đại Nam",
            "Xưởng may Hoàng Gia",
            "Công ty TNHH May Việt Tiến"
        });
        filterPanel.add(createFilterField("Nhà cung cấp", supplierCombo));
        filterPanel.add(Box.createVerticalStrut(20));

        // Nhân viên (ComboBox)
        employeeCombo = new JComboBox<>(new String[]{
            "Tất cả",
            "Nguyễn Thị Tường Vi",
            "Trần Văn Nam",
            "Lê Thị Hoa"
        });
        filterPanel.add(createFilterField("Nhân viên tiếp nhận", employeeCombo));
        filterPanel.add(Box.createVerticalStrut(20));

        // Thời gian
        JPanel timePanel = new JPanel();
        timePanel.setLayout(new BoxLayout(timePanel, BoxLayout.Y_AXIS));
        timePanel.setBackground(CONTENT_COLOR);
        timePanel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel timeLabel = new JLabel("Thời gian");
        timeLabel.setFont(CONTENT_FONT);
        timeLabel.setForeground(Color.BLACK);
        timePanel.add(timeLabel);
        timePanel.add(Box.createVerticalStrut(10));

        // Từ ngày
        fromDateChooser = createDateChooser();
        JPanel fromDatePanel = createDateChooserPanel("Từ ngày:", fromDateChooser);
        timePanel.add(fromDatePanel);
        timePanel.add(Box.createVerticalStrut(10));

        // Đến ngày
        toDateChooser = createDateChooser();
        JPanel toDatePanel = createDateChooserPanel("Đến ngày:", toDateChooser);
        timePanel.add(toDatePanel);

        filterPanel.add(timePanel);
        filterPanel.add(Box.createVerticalStrut(20));

        // Khoảng tiền
        JPanel amountPanel = new JPanel();
        amountPanel.setLayout(new BoxLayout(amountPanel, BoxLayout.Y_AXIS));
        amountPanel.setBackground(CONTENT_COLOR);
        amountPanel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel amountLabel = new JLabel("Khoảng tiền (VND)");
        amountLabel.setFont(CONTENT_FONT);
        amountPanel.add(amountLabel);
        amountPanel.add(Box.createVerticalStrut(10));

        JPanel amountFieldsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        amountFieldsPanel.setBackground(CONTENT_COLOR);

        fromAmountField = createFormattedTextField();
        toAmountField = createFormattedTextField();

        amountFieldsPanel.add(fromAmountField);
        JLabel toLabel = new JLabel("-");
        toLabel.setFont(CONTENT_FONT);
        amountFieldsPanel.add(toLabel);
        amountFieldsPanel.add(toAmountField);

        amountPanel.add(amountFieldsPanel);

        filterPanel.add(amountPanel);
        filterPanel.add(Box.createVerticalStrut(30));

        // Buttons panel
        JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 0));
        buttonsPanel.setBackground(CONTENT_COLOR);

        JButton filterButton = createFilterButton("Áp dụng", e -> applyFilters());
        JButton resetButton = createResetButton("Đặt lại", e -> resetFilters());

        buttonsPanel.add(filterButton);
        buttonsPanel.add(resetButton);

        filterPanel.add(buttonsPanel);

        return filterPanel;
    }

    private JPanel createTablePanel() {
        JPanel tablePanel = new JPanel(new BorderLayout(0, 20));
        tablePanel.setBackground(Color.WHITE);
        
        String[] columns = {
            "Mã phiếu", "Nhà cung cấp", "Nhân viên nhập hàng", "Thời gian", "Tổng tiền"
        };
        
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table = new JTable(tableModel);
        table.setFont(CONTENT_FONT);
        table.setRowHeight(40);
        table.setGridColor(new Color(245, 245, 245));
        table.setSelectionBackground(HOVER_COLOR);
        table.setSelectionForeground(Color.BLACK);
        table.setShowVerticalLines(true);
        table.setShowHorizontalLines(true);
        
        int[] columnWidths = {100, 250, 200, 150, 200};
        for (int i = 0; i < columnWidths.length; i++) {
            table.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
        }
        
        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(Color.WHITE);
        header.setForeground(Color.BLACK);
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 45));
        header.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, new Color(230, 230, 230)));
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        table.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);

        JPopupMenu popupMenu = createTablePopupMenu();
        table.setComponentPopupMenu(popupMenu);
        
        addSampleData();
        
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.getViewport().setBackground(Color.WHITE);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));
        
        JPanel summaryPanel = createSummaryPanel();
        
        tablePanel.add(scrollPane, BorderLayout.CENTER);
        tablePanel.add(summaryPanel, BorderLayout.SOUTH);
        
        return tablePanel;
    }

    private JPopupMenu createTablePopupMenu() {
        JPopupMenu popup = new JPopupMenu();
        popup.setBorder(BorderFactory.createLineBorder(new Color(230, 230, 230)));

        JMenuItem viewItem = new JMenuItem("Xem chi tiết");
        JMenuItem editItem = new JMenuItem("Chỉnh sửa");
        JMenuItem deleteItem = new JMenuItem("Xóa");
        JMenuItem printItem = new JMenuItem("In phiếu nhập");

        viewItem.setIcon(new ImageIcon(getClass().getResource("/icon/pencil.png")));
        editItem.setIcon(new ImageIcon(getClass().getResource("/icon/pencil.png")));
        deleteItem.setIcon(new ImageIcon(getClass().getResource("/icon/pencil.png")));
        printItem.setIcon(new ImageIcon(getClass().getResource("/icon/pencil.png")));

        Font menuFont = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
        viewItem.setFont(menuFont);
        editItem.setFont(menuFont);
        deleteItem.setFont(menuFont);
        printItem.setFont(menuFont);

        viewItem.addActionListener(e -> viewDetail());
        editItem.addActionListener(e -> editRecord());
        deleteItem.addActionListener(e -> deleteRecord());
        printItem.addActionListener(e -> printRecord());

        popup.add(viewItem);
        popup.add(editItem);
        popup.addSeparator();
        popup.add(deleteItem);
        popup.addSeparator();
        popup.add(printItem);

        return popup;
    }

    private JPanel createSummaryPanel() {
        JPanel summaryPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 20, 10));
        summaryPanel.setBackground(Color.WHITE);
        summaryPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(230, 230, 230)));

        JLabel totalRecordsLabel = new JLabel("Tổng số phiếu: ");
        totalRecordsLabel.setFont(CONTENT_FONT);
        totalRecordsValue = new JLabel("6");
        totalRecordsValue.setFont(HEADER_FONT);
        totalRecordsValue.setForeground(PRIMARY_COLOR);

        JLabel totalAmountLabel = new JLabel("Tổng tiền: ");
        totalAmountLabel.setFont(CONTENT_FONT);
        totalAmountValue = new JLabel("94,350,000 VND");
        totalAmountValue.setFont(HEADER_FONT);
        totalAmountValue.setForeground(PRIMARY_COLOR);

        summaryPanel.add(totalRecordsLabel);
        summaryPanel.add(totalRecordsValue);
        summaryPanel.add(Box.createHorizontalStrut(30));
        summaryPanel.add(totalAmountLabel);
        summaryPanel.add(totalAmountValue);

        return summaryPanel;
    }
    private JDateChooser createDateChooser() {
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setPreferredSize(new Dimension(280, 35));
        dateChooser.setFont(CONTENT_FONT);
        dateChooser.setDateFormatString("dd/MM/yyyy");
        dateChooser.setBackground(Color.WHITE);
        
        JTextField textField = ((JTextField)dateChooser.getDateEditor().getUiComponent());
        textField.setBackground(Color.WHITE);
        textField.setBorder(new LineBorder(new Color(230, 230, 230), 1));
        
        return dateChooser;
    }

    private JPanel createDateChooserPanel(String label, JDateChooser dateChooser) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(CONTENT_COLOR);
        
        JLabel dateLabel = new JLabel(label);
        dateLabel.setFont(CONTENT_FONT);
        dateLabel.setPreferredSize(new Dimension(280, 25));
        
        panel.add(dateLabel);
        panel.add(dateChooser);
        
        return panel;
    }

    private JButton createFilterButton(String text, java.awt.event.ActionListener listener) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setBackground(PRIMARY_COLOR);
        button.setForeground(Color.WHITE);
        button.setPreferredSize(new Dimension(120, 35));
        button.setBorder(new LineBorder(PRIMARY_COLOR, 1, true));
        button.setFocusPainted(false);
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(PRIMARY_COLOR.darker());
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(PRIMARY_COLOR);
            }
        });
        
        button.addActionListener(listener);
        return button;
    }

    private JButton createResetButton(String text, java.awt.event.ActionListener listener) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setBackground(Color.WHITE);
        button.setForeground(Color.BLACK);
        button.setPreferredSize(new Dimension(120, 35));
        button.setBorder(new LineBorder(new Color(230, 230, 230), 1, true));
        button.setFocusPainted(false);
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(HOVER_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(Color.WHITE);
            }
        });
        
        button.addActionListener(listener);
        return button;
    }

    private JButton createButton(String text, String iconPath, boolean isRounded) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        if (iconPath != null && !iconPath.isEmpty()) {
            button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
        }
        
        if (isRounded) {
            button.setBorder(new LineBorder(new Color(230, 230, 230), 1, true));
        } else {
            button.setBorder(BorderFactory.createEmptyBorder());
        }
        
        button.setFocusPainted(false);
        button.setBackground(Color.WHITE);
        button.setPreferredSize(new Dimension(130, 38));
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(HOVER_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                if (button.getForeground().equals(Color.WHITE)) {
                    button.setBackground(PRIMARY_COLOR);
                } else {
                    button.setBackground(Color.WHITE);
                }
            }
        });
        
        return button;
    }
    
    private JButton createIconButton(String iconPath) {
        JButton button = new JButton();
        button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
        button.setBorder(BorderFactory.createEmptyBorder());
        button.setFocusPainted(false);
        button.setBackground(Color.WHITE);
        button.setPreferredSize(new Dimension(38, 38));
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(HOVER_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(Color.WHITE);
            }
        });
        
        return button;
    }

    private JFormattedTextField createFormattedTextField() {
        NumberFormat format = NumberFormat.getIntegerInstance();
        format.setGroupingUsed(true);
        JFormattedTextField field = new JFormattedTextField(format);
        field.setPreferredSize(new Dimension(120, 35));
        field.setFont(CONTENT_FONT);
        return field;
    }

    private void addSampleData() {
        Object[][] data = {
            {"P01", "Xưởng may Đại Nam", "Nguyễn Thị Tường Vi", "01/11/2023", "15,000,000 VND"},
            {"P02", "Xưởng may Hoàng Gia", "Trần Văn Nam", "02/11/2023", "12,500,000 VND"},
            {"P03", "Công ty TNHH May Việt Tiến", "Lê Thị Hoa", "03/11/2023", "18,750,000 VND"},
            {"P04", "Xưởng may Đại Nam", "Nguyễn Thị Tường Vi", "05/11/2023", "22,000,000 VND"},
            {"P05", "Xưởng may Hoàng Gia", "Trần Văn Nam", "07/11/2023", "9,800,000 VND"},
            {"P06", "Công ty TNHH May Việt Tiến", "Lê Thị Hoa", "10/11/2023", "16,300,000 VND"}
        };
        
        for (Object[] row : data) {
            tableModel.addRow(row);
        }
        updateSummary();
    }

    private void viewDetail() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String id = table.getValueAt(selectedRow, 0).toString();
            // Thực hiện hiển thị chi tiết phiếu nhập
            JOptionPane.showMessageDialog(this,
                "Xem chi tiết phiếu nhập " + id,
                "Chi tiết phiếu nhập",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void editRecord() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String id = table.getValueAt(selectedRow, 0).toString();
            // Thực hiện chỉnh sửa phiếu nhập
            JOptionPane.showMessageDialog(this,
                "Chỉnh sửa phiếu nhập " + id,
                "Chỉnh sửa phiếu nhập",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void deleteRecord() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String id = table.getValueAt(selectedRow, 0).toString();
            int option = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc muốn xóa phiếu nhập " + id + "?",
                "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
            
            if (option == JOptionPane.YES_OPTION) {
                tableModel.removeRow(selectedRow);
                updateSummary();
            }
        }
    }

    private void deleteSelectedRecords() {
        int[] selectedRows = table.getSelectedRows();
        if (selectedRows.length > 0) {
            int option = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc muốn xóa " + selectedRows.length + " phiếu nhập đã chọn?",
                "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
            
            if (option == JOptionPane.YES_OPTION) {
                // Xóa từ dưới lên để tránh thay đổi index
                for (int i = selectedRows.length - 1; i >= 0; i--) {
                    tableModel.removeRow(selectedRows[i]);
                }
                updateSummary();
            }
        }
    }

    private void printRecord() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String id = table.getValueAt(selectedRow, 0).toString();
            // Thực hiện in phiếu nhập
            JOptionPane.showMessageDialog(this,
                "In phiếu nhập " + id,
                "In phiếu nhập",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void exportToExcel() {
        // Thực hiện xuất file Excel
        JOptionPane.showMessageDialog(this,
            "Xuất dữ liệu ra file Excel",
            "Xuất Excel",
            JOptionPane.INFORMATION_MESSAGE);
    }

    private void showAboutDialog() {
        JOptionPane.showMessageDialog(this,
            "Phần mềm Quản lý Women Fashion\nPhiên bản 1.0\n© 2024 Women Fashion",
            "Thông tin",
            JOptionPane.INFORMATION_MESSAGE);
    }

    private void updateSummary() {
        double totalAmount = 0;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String amountStr = tableModel.getValueAt(i, 4).toString()
                .replace(" VND", "")
                .replace(",", "");
            totalAmount += Double.parseDouble(amountStr);
        }
        
        NumberFormat currencyFormat = NumberFormat.getNumberInstance();
        String formattedAmount = currencyFormat.format(totalAmount) + " VND";
        
        totalRecordsValue.setText(String.valueOf(tableModel.getRowCount()));
        totalAmountValue.setText(formattedAmount);
    }

    private void resetFilters() {
        supplierCombo.setSelectedIndex(0);
        employeeCombo.setSelectedIndex(0);
        fromDateChooser.setDate(null);
        toDateChooser.setDate(null);
        fromAmountField.setValue(null);
        toAmountField.setValue(null);
        searchField.setText("");
        refreshTable();
    }

    private void refreshTable() {
        tableModel.setRowCount(0);
        addSampleData();
    }

    private void applyFilters() {
        String supplier = supplierCombo.getSelectedItem().toString();
        String employee = employeeCombo.getSelectedItem().toString();
        
        Date fromDate = fromDateChooser.getDate();
        Date toDate = toDateChooser.getDate();
        
        Number fromAmount = (Number) fromAmountField.getValue();
        Number toAmount = (Number) toAmountField.getValue();
        
        String searchText = searchField.getText().trim();

        tableModel.setRowCount(0);
        addSampleData(); // Trong thực tế, thay bằng logic lọc dữ liệu
    }
    private JPanel createFilterField(String label, JComponent component) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(CONTENT_COLOR);
        panel.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        // Label
        JLabel titleLabel = new JLabel(label);
        titleLabel.setFont(CONTENT_FONT);
        titleLabel.setForeground(Color.BLACK);
        titleLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

        // Component styling
        component.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        // Style based on component type
        if (component instanceof JComboBox) {
            JComboBox<?> comboBox = (JComboBox<?>) component;
            comboBox.setPreferredSize(new Dimension(280, 35));
            comboBox.setMaximumSize(new Dimension(280, 35));
            comboBox.setFont(CONTENT_FONT);
            comboBox.setBackground(Color.WHITE);
            ((JTextField)comboBox.getEditor().getEditorComponent()).setBorder(
                BorderFactory.createCompoundBorder(
                    new LineBorder(new Color(230, 230, 230), 1),
                    BorderFactory.createEmptyBorder(0, 5, 0, 5)
                )
            );
            
            // Tùy chỉnh giao diện popup menu
            Object comp = comboBox.getUI().getAccessibleChild(comboBox, 0);
            if (comp instanceof JPopupMenu) {
                JPopupMenu popup = (JPopupMenu) comp;
                popup.setBorder(BorderFactory.createLineBorder(new Color(230, 230, 230)));
            }
            
            // Custom renderer để style các items trong combobox
            comboBox.setRenderer(new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(JList<?> list, Object value,
                        int index, boolean isSelected, boolean cellHasFocus) {
                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    setFont(CONTENT_FONT);
                    setBorder(BorderFactory.createEmptyBorder(5, 8, 5, 8));
                    
                    if (isSelected) {
                        setBackground(HOVER_COLOR);
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(Color.WHITE);
                        setForeground(Color.BLACK);
                    }
                    return this;
                }
            });
        } 
        else if (component instanceof JDateChooser) {
            component.setPreferredSize(new Dimension(280, 35));
            component.setMaximumSize(new Dimension(280, 35));
            JDateChooser dateChooser = (JDateChooser) component;
            dateChooser.setFont(CONTENT_FONT);
            dateChooser.setBackground(Color.WHITE);
            
            // Style cho text field trong date chooser
            JTextField textField = ((JTextField)dateChooser.getDateEditor().getUiComponent());
            textField.setBackground(Color.WHITE);
            textField.setBorder(
                BorderFactory.createCompoundBorder(
                    new LineBorder(new Color(230, 230, 230), 1),
                    BorderFactory.createEmptyBorder(0, 5, 0, 5)
                )
            );
        }
        else if (component instanceof JFormattedTextField) {
            JFormattedTextField textField = (JFormattedTextField) component;
            textField.setPreferredSize(new Dimension(280, 35));
            textField.setMaximumSize(new Dimension(280, 35));
            textField.setFont(CONTENT_FONT);
            textField.setBackground(Color.WHITE);
            textField.setBorder(
                BorderFactory.createCompoundBorder(
                    new LineBorder(new Color(230, 230, 230), 1),
                    BorderFactory.createEmptyBorder(0, 5, 0, 5)
                )
            );
            
            // Thêm placeholder
            textField.addFocusListener(new FocusAdapter() {
                private boolean showingPlaceholder = true;
                private Color originalForeground;
                
                @Override
                public void focusGained(FocusEvent e) {
                    if (showingPlaceholder) {
                        textField.setText("");
                        textField.setForeground(originalForeground);
                        showingPlaceholder = false;
                    }
                }
                
                @Override
                public void focusLost(FocusEvent e) {
                    if (textField.getText().isEmpty()) {
                        originalForeground = textField.getForeground();
                        textField.setForeground(Color.GRAY);
                        textField.setText("Nhập số tiền");
                        showingPlaceholder = true;
                    }
                }
            });
        }
        else {
            // Default styling cho các components khác
            component.setPreferredSize(new Dimension(280, 35));
            component.setMaximumSize(new Dimension(280, 35));
            if (component instanceof JTextField) {
                JTextField textField = (JTextField) component;
                textField.setFont(CONTENT_FONT);
                textField.setBackground(Color.WHITE);
                textField.setBorder(
                    BorderFactory.createCompoundBorder(
                        new LineBorder(new Color(230, 230, 230), 1),
                        BorderFactory.createEmptyBorder(0, 5, 0, 5)
                    )
                );
            }
        }

        // Tooltip hiển thị mô tả chi tiết
        String tooltipText = getTooltipText(label);
        if (tooltipText != null) {
            titleLabel.setToolTipText(tooltipText);
            component.setToolTipText(tooltipText);
        }

        // Layout
        panel.add(titleLabel);
        panel.add(Box.createVerticalStrut(5));
        panel.add(component);
        
        return panel;
    }

    private String getTooltipText(String label) {
        switch (label) {
            case "Nhà cung cấp":
                return "Chọn nhà cung cấp để lọc phiếu nhập";
            case "Nhân viên tiếp nhận":
                return "Chọn nhân viên tiếp nhận để lọc phiếu nhập";
            case "Từ ngày":
                return "Chọn ngày bắt đầu của khoảng thời gian cần lọc";
            case "Đến ngày":
                return "Chọn ngày kết thúc của khoảng thời gian cần lọc";
            case "Khoảng tiền (VND)":
                return "Nhập khoảng tiền cần lọc";
            default:
                return null;
        }
    }

    
}