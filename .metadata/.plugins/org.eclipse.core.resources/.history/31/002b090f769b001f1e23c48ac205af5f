package dialog;

import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;

public class ThemNhanVienDialog extends JDialog {
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Color ERROR_COLOR = new Color(220, 38, 38);
    
    private DefaultTableModel tableModel;
    private SimpleDateFormat dateFormat;
    private int employeeCount = 0;
    
    private static final Pattern EMAIL_PATTERN = Pattern.compile(
        "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$"
    );
    
    private static final Pattern PHONE_PATTERN = Pattern.compile(
        "^(\\+84|0)[35789][0-9]{8}$"
    );
    
    public ThemNhanVienDialog(Frame owner, DefaultTableModel tableModel) {
        super(owner, "Thêm nhân viên mới", true);
        this.tableModel = tableModel;
        this.dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        this.employeeCount = tableModel.getRowCount();
        initComponents();
        setupCloseListener();
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    }
    
    private void setupCloseListener() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int choice = JOptionPane.showConfirmDialog(
                    ThemNhanVienDialog.this,
                    "Bạn có chắc muốn đóng cửa sổ này? Dữ liệu chưa lưu sẽ bị mất.",
                    "Xác nhận",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE
                );
                
                if (choice == JOptionPane.YES_OPTION) {
                    dispose();
                }
            }
        });
    }
    
    private void initComponents() {
        setSize(600, 700);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());
        
        // Main content panel with scroll
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.setBackground(Color.WHITE);

        // Form panel
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBackground(Color.WHITE);
        formPanel.setBorder(new EmptyBorder(20, 25, 20, 25));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(8, 5, 8, 5);
        gbc.weightx = 1.0;
        gbc.gridwidth = 2;
        
        int gridy = 0;

        // Basic Information Section
        addSectionHeader(formPanel, "Thông tin cơ bản", gbc, gridy++);

        JTextField idField = createFormField("Mã nhân viên:", formPanel, gbc, gridy++);
        idField.setText(generateNextEmployeeId());
        idField.setEditable(false);
        idField.setBackground(new Color(245, 245, 245));

        JTextField nameField = createFormField("Họ và tên: *", formPanel, gbc, gridy++);
        
        // Gender Panel
        JPanel genderPanel = createGenderPanel();
        gbc.gridy = gridy++;
        formPanel.add(genderPanel, gbc);

        // Birth Date Panel
        JPanel birthDatePanel = createBirthDatePanel();
        gbc.gridy = gridy++;
        formPanel.add(birthDatePanel, gbc);

        // Address Section
        addSectionHeader(formPanel, "Địa chỉ", gbc, gridy++);
        JTextField addressField = createFormField("Địa chỉ:", formPanel, gbc, gridy++);
        JTextField cityField = createFormField("Thành phố:", formPanel, gbc, gridy++);
        JPanel provincePanel = createProvincePanel();
        gbc.gridy = gridy++;
        formPanel.add(provincePanel, gbc);

        // Contact Section
        addSectionHeader(formPanel, "Thông tin liên hệ", gbc, gridy++);
        JTextField phoneField = createFormField("Số điện thoại: *", formPanel, gbc, gridy++);
        JTextField emailField = createFormField("Email: *", formPanel, gbc, gridy++);

        // Work Information Section
        addSectionHeader(formPanel, "Thông tin công việc", gbc, gridy++);
        JPanel departmentPanel = createDepartmentPanel();
        gbc.gridy = gridy++;
        formPanel.add(departmentPanel, gbc);

        JPanel positionPanel = createPositionPanel();
        gbc.gridy = gridy++;
        formPanel.add(positionPanel, gbc);

        // Add form panel to scroll pane
        JScrollPane scrollPane = new JScrollPane(formPanel);
        scrollPane.setBorder(null);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        // Required fields note
        JPanel notePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        notePanel.setBackground(Color.WHITE);
        notePanel.setBorder(new EmptyBorder(0, 25, 10, 25));
        JLabel noteLabel = new JLabel("(*) Thông tin bắt buộc");
        noteLabel.setFont(new Font(CONTENT_FONT.getName(), Font.ITALIC, 11));
        noteLabel.setForeground(new Color(150, 150, 150));
        notePanel.add(noteLabel);
        mainPanel.add(notePanel, BorderLayout.SOUTH);

        
		// Buttons panel
        JPanel buttonPanel = createButtonPanel();

        add(mainPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
    }

    private void addSectionHeader(JPanel panel, String title, GridBagConstraints gbc, int gridy) {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(Color.WHITE);
        headerPanel.setBorder(new EmptyBorder(10, 0, 5, 0));

        JLabel headerLabel = new JLabel(title);
        headerLabel.setFont(new Font(HEADER_FONT.getName(), Font.BOLD, 13));
        headerLabel.setForeground(PRIMARY_COLOR);
        headerPanel.add(headerLabel, BorderLayout.CENTER);

        JSeparator separator = new JSeparator();
        separator.setForeground(new Color(230, 230, 230));
        headerPanel.add(separator, BorderLayout.SOUTH);

        gbc.gridy = gridy;
        panel.add(headerPanel, gbc);
    }

    private JTextField createFormField(String labelText, JPanel panel, GridBagConstraints gbc, int row) {
        JPanel fieldPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        fieldPanel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel(labelText);
        label.setFont(CONTENT_FONT);
        
        JTextField textField = new JTextField();
        textField.setPreferredSize(new Dimension(200, 35));
        textField.setFont(CONTENT_FONT);
        textField.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        fieldPanel.add(label);
        fieldPanel.add(Box.createHorizontalStrut(calculateLabelSpacing(labelText)));
        fieldPanel.add(textField);
        
        gbc.gridy = row;
        gbc.gridx = 0;
        gbc.gridwidth = 2;
        panel.add(fieldPanel, gbc);
        
        return textField;
    }

    private int calculateLabelSpacing(String labelText) {
        switch (labelText) {
            case "Email: *":
                return 87;
            case "Số điện thoại: *":
                return 45;
            default:
                return 65;
        }
    }

    private JPanel createGenderPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Giới tính: *");
        label.setFont(CONTENT_FONT);
        
        String[] genders = {"Nam", "Nữ"};
        JComboBox<String> comboBox = new JComboBox<>(genders);
        comboBox.setFont(CONTENT_FONT);
        comboBox.setPreferredSize(new Dimension(200, 35));
        comboBox.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(63));
        panel.add(comboBox);
        
        return panel;
    }

    private JPanel createBirthDatePanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Ngày sinh: *");
        label.setFont(CONTENT_FONT);
        
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setPreferredSize(new Dimension(200, 35));
        dateChooser.setFont(CONTENT_FONT);
        dateChooser.setDateFormatString("dd/MM/yyyy");
        ((JTextField)dateChooser.getDateEditor().getUiComponent()).setBackground(Color.WHITE);
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(60));
        panel.add(dateChooser);
        
        return panel;
    }

    private JPanel createProvincePanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Tỉnh/Thành phố:");
        label.setFont(CONTENT_FONT);
        
        String[] provinces = {
            "Hà Nội", "TP.HCM", "Đà Nẵng", "Hải Phòng", "Cần Thơ",
            "An Giang", "Bà Rịa-Vũng Tàu", "Bắc Giang", "Bắc Kạn",
            "Bạc Liêu", "Bắc Ninh", "Bến Tre", "Bình Định", "Bình Dương",
            "Bình Phước", "Bình Thuận", "Cà Mau", "Cao Bằng", "Đắk Lắk",
            "Đắk Nông", "Điện Biên", "Đồng Nai", "Đồng Tháp", "Gia Lai",
            "Hà Giang", "Hà Nam", "Hà Tĩnh", "Hải Dương", "Hậu Giang",
            "Hòa Bình", "Hưng Yên", "Khánh Hòa", "Kiên Giang", "Kon Tum",
            "Lai Châu", "Lâm Đồng", "Lạng Sơn", "Lào Cai", "Long An",
            "Nam Định", "Nghệ An", "Ninh Bình", "Ninh Thuận", "Phú Thọ",
            "Phú Yên", "Quảng Bình", "Quảng Nam", "Quảng Ngãi", "Quảng Ninh",
            "Quảng Trị", "Sóc Trăng", "Sơn La", "Tây Ninh", "Thái Bình",
            "Thái Nguyên", "Thanh Hóa", "Thừa Thiên Huế", "Tiền Giang",
            "Trà Vinh", "Tuyên Quang", "Vĩnh Long", "Vĩnh Phúc", "Yên Bái"
        };
        
        JComboBox<String> comboBox = new JComboBox<>(provinces);
        comboBox.setFont(CONTENT_FONT);
        comboBox.setPreferredSize(new Dimension(200, 35));
        comboBox.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(40));
        panel.add(comboBox);
        
        return panel;
    }

    private JPanel createDepartmentPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Phòng ban:");
        label.setFont(CONTENT_FONT);
        
        String[] departments = {
            "Kỹ thuật", "Kinh doanh", "Nhân sự", "Kế toán", "Marketing",
            "Hành chính", "CNTT", "Chăm sóc khách hàng", "Nghiên cứu và phát triển",
            "Đào tạo", "Logistics", "Bảo vệ", "Tài chính", "Pháp chế"
        };
        
        JComboBox<String> comboBox = new JComboBox<>(departments);
        comboBox.setFont(CONTENT_FONT);
        comboBox.setPreferredSize(new Dimension(200, 35));
        comboBox.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(55));
        panel.add(comboBox);
        
        return panel;
    }

    private JPanel createPositionPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Chức vụ:");
        label.setFont(CONTENT_FONT);
        
        String[] positions = {
            "Nhân viên", "Trưởng nhóm", "Phó phòng", "Trưởng phòng", 
            "Giám đốc bộ phận", "Phó giám đốc", "Giám đốc", "Tổng giám đốc",
            "Chủ tịch", "Thực tập sinh", "Cộng tác viên"
        };
        
        JComboBox<String> comboBox = new JComboBox<>(positions);
        comboBox.setFont(CONTENT_FONT);
        comboBox.setPreferredSize(new Dimension(200, 35));
        comboBox.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(70));
        panel.add(comboBox);
        
        return panel;
    }

    private JPanel createButtonPanel(
    	    JTextField nameField, JTextField phoneField, JTextField emailField,
    	    JDateChooser birthDateChooser, JComboBox<String> genderCombo,
    	    JTextField idField, JTextField addressField, JTextField cityField,
    	    JComboBox<String> provinceCombo, JComboBox<String> departmentCombo,
    	    JComboBox<String> positionCombo) {

    	    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 15));
    	    buttonPanel.setBackground(Color.WHITE);
    	    buttonPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(230, 230, 230)));

    	    // Tạo nút Lưu
    	    JButton saveButton = createStyledButton("Lưu", true);
    	    saveButton.setPreferredSize(new Dimension(120, 40));
    	    saveButton.addActionListener(e -> {
    	        if (validateFields(nameField, phoneField, emailField, birthDateChooser)) {
    	            // Tạo đối tượng chứa thông tin nhân viên
    	            Object[] rowData = {
    	                idField.getText(),                           // Mã NV
    	                nameField.getText().trim(),                  // Họ tên
    	                genderCombo.getSelectedItem().toString(),    // Giới tính
    	                new SimpleDateFormat("dd/MM/yyyy").format(birthDateChooser.getDate()), // Ngày sinh
    	                addressField.getText().trim(),               // Địa chỉ
    	                cityField.getText().trim(),                  // Thành phố
    	                provinceCombo.getSelectedItem().toString(),  // Tỉnh/TP
    	                phoneField.getText().trim(),                 // Số điện thoại
    	                emailField.getText().trim(),                 // Email
    	                departmentCombo.getSelectedItem().toString(),// Phòng ban
    	                positionCombo.getSelectedItem().toString(),  // Chức vụ
    	                new SimpleDateFormat("dd/MM/yyyy").format(new Date()) // Ngày tạo
    	            };

    	            try {
    	                // Thêm dữ liệu vào bảng
    	                tableModel.addRow(rowData);
    	                
    	                // Hiển thị thông báo thành công
    	                JOptionPane.showMessageDialog(
    	                    this,
    	                    "Thêm nhân viên thành công!",
    	                    "Thành công",
    	                    JOptionPane.INFORMATION_MESSAGE
    	                );
    	                
    	                // Đóng dialog
    	                dispose();
    	            } catch (Exception ex) {
    	                JOptionPane.showMessageDialog(
    	                    this,
    	                    "Lỗi khi thêm nhân viên: " + ex.getMessage(),
    	                    "Lỗi",
    	                    JOptionPane.ERROR_MESSAGE
    	                );
    	            }
    	        }
    	    });


        // Tạo nút Hủy
        JButton cancelButton = createStyledButton("Hủy", false);
        cancelButton.setPreferredSize(new Dimension(120, 40));
        cancelButton.addActionListener(e -> {
            int choice = JOptionPane.showConfirmDialog(
                this,
                "Bạn có chắc muốn hủy? Tất cả dữ liệu đã nhập sẽ bị mất.",
                "Xác nhận",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
            );
            
            if (choice == JOptionPane.YES_OPTION) {
                dispose();
            }
        });

        buttonPanel.add(saveButton);
        buttonPanel.add(Box.createHorizontalStrut(10));
        buttonPanel.add(cancelButton);

        return buttonPanel;
    }

    private JButton createStyledButton(String text, boolean isPrimary) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setFocusPainted(false);
        button.setBorderPainted(true);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        if (isPrimary) {
            button.setBackground(PRIMARY_COLOR);
            button.setForeground(Color.WHITE);
            button.setBorder(new LineBorder(PRIMARY_COLOR));
            
            button.addMouseListener(new MouseAdapter() {
                public void mouseEntered(MouseEvent e) {
                    button.setBackground(PRIMARY_COLOR.darker());
                    button.setBorder(new LineBorder(PRIMARY_COLOR.darker()));
                }
                
                public void mouseExited(MouseEvent e) {
                    button.setBackground(PRIMARY_COLOR);
                    button.setBorder(new LineBorder(PRIMARY_COLOR));
                }
            });
        } else {
            button.setBackground(Color.WHITE);
            button.setForeground(Color.BLACK);
            button.setBorder(new LineBorder(new Color(230, 230, 230)));
            
            button.addMouseListener(new MouseAdapter() {
                public void mouseEntered(MouseEvent e) {
                    button.setBackground(HOVER_COLOR);
                }
                
                public void mouseExited(MouseEvent e) {
                    button.setBackground(Color.WHITE);
                }
            });
        }
        
        return button;
    }

    private String generateNextEmployeeId() {
        return String.format("NV%04d", employeeCount + 1);
    }

    private boolean validateFields(
        JTextField nameField, JTextField phoneField,
        JTextField emailField, JDateChooser birthDateChooser) {
            
        StringBuilder errorMessage = new StringBuilder("Vui lòng kiểm tra lại:\n");
        boolean isValid = true;

        // Kiểm tra tên
        if (nameField.getText().trim().isEmpty()) {
            errorMessage.append("- Họ và tên không được để trống\n");
            isValid = false;
        } else if (!nameField.getText().trim().matches("^[\\p{L} .'-]+$")) {
            errorMessage.append("- Họ và tên chỉ được chứa chữ cái và khoảng trắng\n");
            isValid = false;
        }

        // Kiểm tra số điện thoại
        if (phoneField.getText().trim().isEmpty()) {
            errorMessage.append("- Số điện thoại không được để trống\n");
            isValid = false;
        } else if (!PHONE_PATTERN.matcher(phoneField.getText().trim()).matches()) {
            errorMessage.append("- Số điện thoại không hợp lệ (Định dạng: 0xxxxxxxxx hoặc +84xxxxxxxxx)\n");
            isValid = false;
        }

        // Kiểm tra email
        if (emailField.getText().trim().isEmpty()) {
            errorMessage.append("- Email không được để trống\n");
            isValid = false;
        } else if (!EMAIL_PATTERN.matcher(emailField.getText().trim()).matches()) {
            errorMessage.append("- Email không hợp lệ\n");
            isValid = false;
        }

        // Kiểm tra ngày sinh
        if (birthDateChooser.getDate() == null) {
            errorMessage.append("- Ngày sinh không được để trống\n");
            isValid = false;
        } else {
            Date birthDate = birthDateChooser.getDate();
            Date currentDate = new Date();
            
            // Kiểm tra tuổi (ít nhất 18 tuổi)
            long age = (currentDate.getTime() - birthDate.getTime()) / (1000L * 60 * 60 * 24 * 365);
            if (age < 18) {
                errorMessage.append("- Nhân viên phải đủ 18 tuổi\n");
                isValid = false;
            }
            
            if (birthDate.after(currentDate)) {
                errorMessage.append("- Ngày sinh không thể sau ngày hiện tại\n");
                isValid = false;
            }
        }

        if (!isValid) {
            JOptionPane.showMessageDialog(
                this,
                errorMessage.toString(),
                "Lỗi nhập liệu",
                JOptionPane.ERROR_MESSAGE
            );
        }

        return isValid;
    }

    private void saveEmployee(
        String id, String name, String gender, Date birthDate,
        String address, String city, String province,
        String phone, String email, String department, String position) {
            
        Object[] rowData = {
            id,
            name,
            gender,
            dateFormat.format(birthDate),
            address,
            city,
            province,
            phone,
            email,
            department,
            position,
            dateFormat.format(new Date()) // Ngày tạo
        };
        
        tableModel.addRow(rowData);
        employeeCount++;
        
        JOptionPane.showMessageDialog(
            this,
            "Thêm nhân viên thành công!",
            "Thành công",
            JOptionPane.INFORMATION_MESSAGE
        );
    }
}