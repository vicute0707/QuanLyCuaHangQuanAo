package gui;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class QuanLyNhapHang extends JPanel {
    
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 242, 242);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
    private static final Font TITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 16);
    
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField searchField;
    private JFormattedTextField fromAmountField;
    private JFormattedTextField toAmountField;
    private JDateChooser fromDateChooser;
    private JDateChooser toDateChooser;
    private JComboBox<String> supplierCombo;
    private JComboBox<String> employeeCombo;
    
    public QuanLyNhapHang() {
        initComponents();
    }

    // ... (giữ nguyên các phương thức initComponents và createTopPanel)

    private JPanel createFilterPanel() {
        JPanel filterPanel = new JPanel();
        filterPanel.setLayout(new BoxLayout(filterPanel, BoxLayout.Y_AXIS));
        filterPanel.setBackground(CONTENT_COLOR);
        filterPanel.setBorder(BorderFactory.createCompoundBorder(
            new EmptyBorder(0, 0, 0, 20),
            BorderFactory.createCompoundBorder(
                new LineBorder(PRIMARY_COLOR, 1, true),
                new EmptyBorder(20, 20, 20, 20)
            )
        ));
        filterPanel.setPreferredSize(new Dimension(320, 0));

        // Tiêu đề panel
        JLabel titleLabel = new JLabel("Lọc kết quả");
        titleLabel.setFont(TITLE_FONT);
        titleLabel.setForeground(PRIMARY_COLOR);
        titleLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        filterPanel.add(titleLabel);
        filterPanel.add(Box.createVerticalStrut(25));

        // Nhà cung cấp (ComboBox)
        supplierCombo = new JComboBox<>(new String[]{
            "Tất cả",
            "Xưởng may Đại Nam",
            "Xưởng may Hoàng Gia",
            "Công ty TNHH May Việt Tiến"
        });
        filterPanel.add(createFilterField("Nhà cung cấp", supplierCombo));
        filterPanel.add(Box.createVerticalStrut(20));

        // Nhân viên (ComboBox)
        employeeCombo = new JComboBox<>(new String[]{
            "Tất cả",
            "Nguyễn Thị Tường Vi",
            "Trần Văn Nam",
            "Lê Thị Hoa"
        });
        filterPanel.add(createFilterField("Nhân viên tiếp nhận", employeeCombo));
        filterPanel.add(Box.createVerticalStrut(20));

        // Thời gian
        JPanel timePanel = new JPanel();
        timePanel.setLayout(new BoxLayout(timePanel, BoxLayout.Y_AXIS));
        timePanel.setBackground(CONTENT_COLOR);
        timePanel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel timeLabel = new JLabel("Thời gian");
        timeLabel.setFont(CONTENT_FONT);
        timeLabel.setForeground(Color.BLACK);
        timePanel.add(timeLabel);
        timePanel.add(Box.createVerticalStrut(10));

        // Từ ngày
        fromDateChooser = createDateChooser();
        JPanel fromDatePanel = createDateChooserPanel("Từ ngày:", fromDateChooser);
        timePanel.add(fromDatePanel);
        timePanel.add(Box.createVerticalStrut(10));

        // Đến ngày
        toDateChooser = createDateChooser();
        JPanel toDatePanel = createDateChooserPanel("Đến ngày:", toDateChooser);
        timePanel.add(toDatePanel);

        filterPanel.add(timePanel);
        filterPanel.add(Box.createVerticalStrut(20));

        // Khoảng tiền
        JPanel amountPanel = new JPanel();
        amountPanel.setLayout(new BoxLayout(amountPanel, BoxLayout.Y_AXIS));
        amountPanel.setBackground(CONTENT_COLOR);
        amountPanel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel amountLabel = new JLabel("Khoảng tiền (VND)");
        amountLabel.setFont(CONTENT_FONT);
        amountPanel.add(amountLabel);
        amountPanel.add(Box.createVerticalStrut(10));

        JPanel amountFieldsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        amountFieldsPanel.setBackground(CONTENT_COLOR);

        fromAmountField = createFormattedTextField();
        toAmountField = createFormattedTextField();

        amountFieldsPanel.add(fromAmountField);
        JLabel toLabel = new JLabel("-");
        toLabel.setFont(CONTENT_FONT);
        amountFieldsPanel.add(toLabel);
        amountFieldsPanel.add(toAmountField);

        amountPanel.add(amountFieldsPanel);

        filterPanel.add(amountPanel);
        filterPanel.add(Box.createVerticalStrut(30));

        // Buttons panel
        JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 0));
        buttonsPanel.setBackground(CONTENT_COLOR);

        JButton filterButton = createFilterButton("Áp dụng", e -> applyFilters());
        JButton resetButton = createResetButton("Đặt lại", e -> resetFilters());

        buttonsPanel.add(filterButton);
        buttonsPanel.add(resetButton);

        filterPanel.add(buttonsPanel);

        return filterPanel;
    }

    private JDateChooser createDateChooser() {
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setPreferredSize(new Dimension(280, 35));
        dateChooser.setFont(CONTENT_FONT);
        dateChooser.setDateFormatString("dd/MM/yyyy");
        dateChooser.setBackground(Color.WHITE);
        
        // Customize the text field inside JDateChooser
        JTextField textField = ((JTextField)dateChooser.getDateEditor().getUiComponent());
        textField.setBackground(Color.WHITE);
        textField.setBorder(new LineBorder(new Color(230, 230, 230), 1));
        
        return dateChooser;
    }

    private JPanel createDateChooserPanel(String label, JDateChooser dateChooser) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(CONTENT_COLOR);
        
        JLabel dateLabel = new JLabel(label);
        dateLabel.setFont(CONTENT_FONT);
        dateLabel.setPreferredSize(new Dimension(280, 25));
        
        panel.add(dateLabel);
        panel.add(dateChooser);
        
        return panel;
    }

    private JButton createFilterButton(String text, java.awt.event.ActionListener listener) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setBackground(PRIMARY_COLOR);
        button.setForeground(Color.WHITE);
        button.setPreferredSize(new Dimension(120, 35));
        button.setBorder(new LineBorder(PRIMARY_COLOR, 1, true));
        button.setFocusPainted(false);
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(PRIMARY_COLOR.darker());
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(PRIMARY_COLOR);
            }
        });
        
        button.addActionListener(listener);
        return button;
    }

    private JButton createResetButton(String text, java.awt.event.ActionListener listener) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setBackground(Color.WHITE);
        button.setForeground(Color.BLACK);
        button.setPreferredSize(new Dimension(120, 35));
        button.setBorder(new LineBorder(new Color(230, 230, 230), 1, true));
        button.setFocusPainted(false);
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(HOVER_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(Color.WHITE);
            }
        });
        
        button.addActionListener(listener);
        return button;
    }

    private void resetFilters() {
        supplierCombo.setSelectedIndex(0);
        employeeCombo.setSelectedIndex(0);
        fromDateChooser.setDate(null);
        toDateChooser.setDate(null);
        fromAmountField.setValue(null);
        toAmountField.setValue(null);
        searchField.setText("");
        refreshTable();
    }

    private void applyFilters() {
        String supplier = supplierCombo.getSelectedItem().toString();
        String employee = employeeCombo.getSelectedItem().toString();
        
        Date fromDate = fromDateChooser.getDate();
        Date toDate = toDateChooser.getDate();
        
        Number fromAmount = (Number) fromAmountField.getValue();
        Number toAmount = (Number) toAmountField.getValue();
        
        String searchText = searchField.getText().trim();

        tableModel.setRowCount(0);
        addSampleData(); // Trong thực tế, thay bằng logic lọc dữ liệu
    }
    private JPanel createTablePanel() {
        JPanel tablePanel = new JPanel(new BorderLayout(0, 20));
        tablePanel.setBackground(Color.WHITE);
        
        // Create table model with columns
        String[] columns = {
            "Mã phiếu", "Nhà cung cấp", "Nhân viên nhập hàng", "Thời gian", "Tổng tiền"
        };
        
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        // Table settings
        table = new JTable(tableModel);
        table.setFont(CONTENT_FONT);
        table.setRowHeight(40); // Tăng chiều cao hàng
        table.setGridColor(new Color(245, 245, 245));
        table.setSelectionBackground(HOVER_COLOR);
        table.setSelectionForeground(Color.BLACK);
        table.setShowVerticalLines(true);
        table.setShowHorizontalLines(true);
        
        // Column widths
        int[] columnWidths = {100, 250, 200, 150, 200};
        for (int i = 0; i < columnWidths.length; i++) {
            table.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
        }
        
        // Table header settings
        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(Color.WHITE);
        header.setForeground(Color.BLACK);
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 45));
        header.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, new Color(230, 230, 230)));
        
        // Center align for specific columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // Mã phiếu
        table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer); // Thời gian
        
        // Right align for amount column
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        table.getColumnModel().getColumn(4).setCellRenderer(rightRenderer); // Tổng tiền

        // Add right-click popup menu
        JPopupMenu popupMenu = createTablePopupMenu();
        table.setComponentPopupMenu(popupMenu);
        
        // Add sample data
        addSampleData();
        
        // Create scroll pane with customized appearance
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.getViewport().setBackground(Color.WHITE);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));
        
        // Add summary panel at the bottom
        JPanel summaryPanel = createSummaryPanel();
        
        tablePanel.add(scrollPane, BorderLayout.CENTER);
        tablePanel.add(summaryPanel, BorderLayout.SOUTH);
        
        return tablePanel;
    }

    private JPopupMenu createTablePopupMenu() {
        JPopupMenu popup = new JPopupMenu();
        popup.setBorder(BorderFactory.createLineBorder(new Color(230, 230, 230)));

        // Menu items
        JMenuItem viewItem = new JMenuItem("Xem chi tiết");
        JMenuItem editItem = new JMenuItem("Chỉnh sửa");
        JMenuItem deleteItem = new JMenuItem("Xóa");
        JMenuItem printItem = new JMenuItem("In phiếu nhập");

        // Add icons
        viewItem.setIcon(new ImageIcon(getClass().getResource("/icon/eye.png")));
        editItem.setIcon(new ImageIcon(getClass().getResource("/icon/edit.png")));
        deleteItem.setIcon(new ImageIcon(getClass().getResource("/icon/trash.png")));
        printItem.setIcon(new ImageIcon(getClass().getResource("/icon/printer.png")));

        // Style menu items
        Font menuFont = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
        viewItem.setFont(menuFont);
        editItem.setFont(menuFont);
        deleteItem.setFont(menuFont);
        printItem.setFont(menuFont);

        // Add action listeners
        viewItem.addActionListener(e -> viewDetail());
        editItem.addActionListener(e -> editRecord());
        deleteItem.addActionListener(e -> deleteRecord());
        printItem.addActionListener(e -> printRecord());

        // Add items to popup
        popup.add(viewItem);
        popup.add(editItem);
        popup.addSeparator();
        popup.add(deleteItem);
        popup.addSeparator();
        popup.add(printItem);

        return popup;
    }

    private JPanel createSummaryPanel() {
        JPanel summaryPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 20, 10));
        summaryPanel.setBackground(Color.WHITE);
        summaryPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(230, 230, 230)));

        // Tổng số phiếu
        JLabel totalRecordsLabel = new JLabel("Tổng số phiếu: ");
        totalRecordsLabel.setFont(CONTENT_FONT);
        JLabel totalRecordsValue = new JLabel("6");
        totalRecordsValue.setFont(HEADER_FONT);
        totalRecordsValue.setForeground(PRIMARY_COLOR);

        // Tổng tiền
        JLabel totalAmountLabel = new JLabel("Tổng tiền: ");
        totalAmountLabel.setFont(CONTENT_FONT);
        JLabel totalAmountValue = new JLabel("94,350,000 VND");
        totalAmountValue.setFont(HEADER_FONT);
        totalAmountValue.setForeground(PRIMARY_COLOR);

        summaryPanel.add(totalRecordsLabel);
        summaryPanel.add(totalRecordsValue);
        summaryPanel.add(Box.createHorizontalStrut(30));
        summaryPanel.add(totalAmountLabel);
        summaryPanel.add(totalAmountValue);

        return summaryPanel;
    }

    private void viewDetail() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String id = table.getValueAt(selectedRow, 0).toString();
            JOptionPane.showMessageDialog(this,
                "Xem chi tiết phiếu nhập " + id,
                "Chi tiết phiếu nhập",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void editRecord() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String id = table.getValueAt(selectedRow, 0).toString();
            JOptionPane.showMessageDialog(this,
                "Chỉnh sửa phiếu nhập " + id,
                "Chỉnh sửa phiếu nhập",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void deleteRecord() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String id = table.getValueAt(selectedRow, 0).toString();
            int option = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc muốn xóa phiếu nhập " + id + "?",
                "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
            
            if (option == JOptionPane.YES_OPTION) {
                tableModel.removeRow(selectedRow);
                updateSummary();
            }
        }
    }

    private void printRecord() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String id = table.getValueAt(selectedRow, 0).toString();
            JOptionPane.showMessageDialog(this,
                "In phiếu nhập " + id,
                "In phiếu nhập",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void updateSummary() {
        double totalAmount = 0;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String amountStr = tableModel.getValueAt(i, 4).toString()
                .replace(" VND", "")
                .replace(",", "");
            totalAmount += Double.parseDouble(amountStr);
        }
        
        // Format to currency string
        NumberFormat currencyFormat = NumberFormat.getNumberInstance();
        String formattedAmount = currencyFormat.format(totalAmount) + " VND";
        
        // Update summary panel (you would need to make these labels class fields)
        // totalRecordsValue.setText(String.valueOf(tableModel.getRowCount()));
        // totalAmountValue.setText(formattedAmount);
    }

    public static void main(String[] args) {
        try {
            // Set system look and feel
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Quản lý nhập hàng");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(1280, 720);
            frame.add(new QuanLyNhapHang());
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
    }
}

    // ... (giữ nguyên các phương thức còn lại)
}