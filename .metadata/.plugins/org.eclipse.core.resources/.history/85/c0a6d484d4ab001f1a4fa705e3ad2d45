package gui;

import dao.*;
import entity.*;
import service.PermissionManager;
import dialog.*;
import component.CreateTabPanel;
import style.*;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.List;

public class Form_NhanVien extends JPanel {
    private static final Color CONTENT_COLOR = new Color(255, 192, 203);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font("Arial", Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font("Arial", Font.PLAIN, 12);
    private static final Font TAB_FONT = new Font("Arial", Font.BOLD, 14);
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);

    private JTabbedPane tabbedPane;
    private User currentUser;
    private UserDAO userDAO;
    private PermissionDAO permissionDAO;
    private UserRoleDAO userRoleDAO;
    private PermissionManager permissionManager;
    private JTable staffTable;
    private JTable permissionTable;
    private JTable accountTable;
    private JButton addButton;
    private JButton editButton;
    private JButton deleteButton;
    private JButton exportButton;
    private JButton refreshButton;
    private JTextField searchField;

    public Form_NhanVien(User currentUser) {
        this.currentUser = currentUser;
        this.userDAO = new UserDAO();
        this.permissionDAO = new PermissionDAO();
        this.userRoleDAO = new UserRoleDAO();
        this.permissionManager = PermissionManager.getInstance();
        
        setLayout(new BorderLayout());
        initComponents();
        loadData();
    }

    private void initComponents() {
        setBackground(Color.WHITE);
        tabbedPane = new JTabbedPane(JTabbedPane.TOP);
        tabbedPane.setFont(TAB_FONT);
        tabbedPane.setBackground(Color.WHITE);
        
        // Style cho tabbedPane
        StyleTabbedPane styleTabbedPane = new StyleTabbedPane();
        styleTabbedPane.styleTabbedPane(tabbedPane);
        
        // Tạo các panel chức năng
        if (permissionManager.hasPermission(currentUser, "VIEW_STAFF")) {
            tabbedPane.addTab("Quản lý nhân viên", createStaffPanel());
        }
        
        if (permissionManager.hasPermission(currentUser, "VIEW_PERMISSIONS")) {
            tabbedPane.addTab("Phân quyền", createPermissionPanel());
        }
        
        if (permissionManager.hasPermission(currentUser, "VIEW_ACCOUNTS")) {
            tabbedPane.addTab("Tài khoản", createAccountPanel());
        }
        
        // Set màu cho text của tab
        for(int i = 0; i < tabbedPane.getTabCount(); i++) {
            tabbedPane.setForegroundAt(i, new Color(50, 50, 50));
        }
        
        add(tabbedPane, BorderLayout.CENTER);
        setOpaque(true);
        
        // Thêm listener cho tab changes
        tabbedPane.addChangeListener(e -> handleTabChange());
    }

    private JPanel createStaffPanel() {
        JPanel panel = new JPanel(new BorderLayout(5, 5));
        panel.setBackground(Color.WHITE);

        // Toolbar
        JPanel toolBar = createToolBar("nhân viên");
        panel.add(toolBar, BorderLayout.NORTH);

        // Table
        String[] columns = {"Mã NV", "Họ và tên", "Giới tính", "Ngày sinh", "SDT", "Email", "Trạng thái"};
        staffTable = createTable(columns);
        staffTable.setDefaultRenderer(Object.class, new CenterAlignRenderer());
        staffTable.getColumnModel().getColumn(6).setCellRenderer(new StatusColumnRenderer());
        
        JScrollPane scrollPane = new JScrollPane(staffTable);
        scrollPane.getVerticalScrollBar().setUI(new CustomScrollBarUI());
        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createPermissionPanel() {
        JPanel panel = new JPanel(new BorderLayout(5, 5));
        panel.setBackground(Color.WHITE);

        // Toolbar
        JPanel toolBar = createToolBar("quyền");
        panel.add(toolBar, BorderLayout.NORTH);

        // Table
        String[] columns = {"Mã quyền", "Tên quyền", "Mô tả"};
        permissionTable = createTable(columns);
        permissionTable.setDefaultRenderer(Object.class, new CenterAlignRenderer());
        
        JScrollPane scrollPane = new JScrollPane(permissionTable);
        scrollPane.getVerticalScrollBar().setUI(new CustomScrollBarUI());
        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createAccountPanel() {
        JPanel panel = new JPanel(new BorderLayout(5, 5));
        panel.setBackground(Color.WHITE);

        // Toolbar
        JPanel toolBar = createToolBar("tài khoản");
        panel.add(toolBar, BorderLayout.NORTH);

        // Table
        String[] columns = {"Mã NV", "Tên đăng nhập", "Vai trò", "Trạng thái"};
        accountTable = createTable(columns);
        accountTable.setDefaultRenderer(Object.class, new CenterAlignRenderer());
        accountTable.getColumnModel().getColumn(3).setCellRenderer(new StatusColumnRenderer());
        
        JScrollPane scrollPane = new JScrollPane(accountTable);
        scrollPane.getVerticalScrollBar().setUI(new CustomScrollBarUI());
        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createToolBar(String type) {
        JPanel toolBar = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 5));
        toolBar.setBackground(Color.WHITE);

        // Search field
        searchField = new JTextField(20);
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                handleSearch();
            }
        });
        
        // Buttons
        addButton = new JButton("Thêm");
        editButton = new JButton("Sửa");
        deleteButton = new JButton("Xóa");
        exportButton = new JButton("Xuất Excel");
        refreshButton = new JButton("Làm mới");

        // Add action listeners
        addButton.addActionListener(e -> handleAdd(type));
        editButton.addActionListener(e -> handleEdit(type));
        deleteButton.addActionListener(e -> handleDelete(type));
        exportButton.addActionListener(e -> handleExport(type));
        refreshButton.addActionListener(e -> loadData());

        // Add components to toolbar
        toolBar.add(new JLabel("Tìm kiếm: "));
        toolBar.add(searchField);
        toolBar.add(addButton);
        toolBar.add(editButton);
        toolBar.add(deleteButton);
        toolBar.add(exportButton);
        toolBar.add(refreshButton);

        // Set button permissions
        updateButtonPermissions(type);

        return toolBar;
    }

    private JTable createTable(String[] columns) {
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        JTable table = new JTable(model);
        table.getTableHeader().setFont(HEADER_FONT);
        table.setFont(CONTENT_FONT);
        table.setRowHeight(25);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        
        return table;
    }

    private void loadData() {
        // Load staff data
        if (staffTable != null && permissionManager.hasPermission(currentUser, "VIEW_STAFF")) {
            DefaultTableModel model = (DefaultTableModel) staffTable.getModel();
            model.setRowCount(0);
            
            List<User> users = userDAO.getAllUsers();
            for (User user : users) {
                model.addRow(new Object[]{
                    user.getUserID(),
                    user.getFullName(),
                    user.getGender(),
                    user.getBirthDate(),
                    user.getPhone(),
                    user.getEmail(),
                    user.getStatus()
                });
            }
        }

        // Load permission data
        if (permissionTable != null && permissionManager.hasPermission(currentUser, "VIEW_PERMISSIONS")) {
            DefaultTableModel model = (DefaultTableModel) permissionTable.getModel();
            model.setRowCount(0);
            
            List<Permission> permissions = permissionDAO.getAllPermissions();
            for (Permission permission : permissions) {
                model.addRow(new Object[]{
                    permission.getPermissionID(),
                    permission.getName(),
                    permission.getDescription()
                });
            }
        }

        // Load account data
        if (accountTable != null && permissionManager.hasPermission(currentUser, "VIEW_ACCOUNTS")) {
            DefaultTableModel model = (DefaultTableModel) accountTable.getModel();
            model.setRowCount(0);
            
            List<User> users = userDAO.getAllUsers();
            for (User user : users) {
                model.addRow(new Object[]{
                    user.getUserID(),
                    user.getUsername(),
                    user.getRole(),
                    user.getStatus()
                });
            }
        }
    }

    private void handleSearch() {
        String searchText = searchField.getText().toLowerCase();
        JTable currentTable = getCurrentTable();
        
        if (currentTable != null) {
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(currentTable.getModel());
            currentTable.setRowSorter(sorter);
            
            if (searchText.trim().isEmpty()) {
                sorter.setRowFilter(null);
            } else {
                sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
            }
        }
    }

    private void handleAdd(String type) {
        switch (type) {
            case "nhân viên":
                if (permissionManager.hasPermission(currentUser, "ADD_STAFF")) {
                    new ThemNhanVienDialog(SwingUtilities.getWindowAncestor(this), 
                        true, userDAO, () -> loadData()).setVisible(true);
                }
                break;
            case "quyền":
                if (permissionManager.hasPermission(currentUser, "MANAGE_PERMISSIONS")) {
                    new ThemQuyenDialog(SwingUtilities.getWindowAncestor(this),
                        true, permissionDAO, () -> loadData()).setVisible(true);
                }
                break;
            case "tài khoản":
                if (permissionManager.hasPermission(currentUser, "MANAGE_ACCOUNTS")) {
                    new ThemTaiKhoanDialog(SwingUtilities.getWindowAncestor(this),
                        true, userDAO, userRoleDAO, () -> loadData()).setVisible(true);
                }
                break;
        }
    }

    private void handleEdit(String type) {
        JTable currentTable = getCurrentTable();
        if (currentTable == null || currentTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một dòng để chỉnh sửa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        int row = currentTable.getSelectedRow();
        String id = currentTable.getValueAt(row, 0).toString();

        switch (type) {
            case "nhân viên":
                if (permissionManager.hasPermission(currentUser, "EDIT_STAFF")) {
                    User user = userDAO.getUserById(id);
                    if (user != null) {
                        new SuaNhanVienDialog(SwingUtilities.getWindowAncestor(this),
                            true, user, userDAO, () -> loadData()).setVisible(true);
                    }
                }
                break;
            case "quyền":
                if (permissionManager.hasPermission(currentUser, "MANAGE_PERMISSIONS")) {
                    Permission permission = permissionDAO.getPermissionById(id);
                    if (permission != null) {
                        new SuaQuyenDialog(SwingUtilities.getWindowAncestor(this),
                            true, permission, permissionDAO, () -> loadData()).setVisible(true);
                    }
                }
                break;
            case "tài khoản":
                if (permissionManager.hasPermission(currentUser, "MANAGE_ACCOUNTS")) {
                    User account = userDAO.getUserById(id);
                    if (account != null) {
                        new SuaTaiKhoanDialog(SwingUtilities.getWindowAncestor(this),
                            true, account, userDAO, userRoleDAO, () -> loadData()).setVisible(true);
                    }
                }
                break;
        }
    }

    private void handleDelete(String type) {
        JTable currentTable = getCurrentTable();
        if (currentTable == null || currentTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một dòng để xóa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        int row = currentTable.getSelectedRow();
        String id = currentTable.getValueAt(row, 0).toString();

        int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc chắn muốn xóa " + type + " này?",
            "Xác nhận xóa",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = false;
            switch (type) {
                case "nhân viên":
                    if (permissionManager.hasPermission(currentUser, "DELETE_STAFF")) {
                        success = userDAO.deleteUser(id);
                    }
                    break;
                case "quyền":
                    if (permissionManager.hasPermission(currentUser, "MANAGE_PERMISSIONS")) {
                        success = permissionDAO.deletePermission(id);
                    }
                    break;
                case "tài khoản":
                    if (permissionManager.hasPermission(currentUser, "MANAGE_ACCOUNTS")) {
                        success = userDAO.deleteUser(id);
                    }
                    break;
            }

            if (success) {
                JOptionPane.showMessageDialog(this,
                    "Xóa " + type + " thành công!",
                    "Thông báo",
                    JOptionPane.INFORMATION_MESSAGE);
                loadData();
            } else {
            	 JOptionPane.showMessageDialog(this,
                         "Xóa " + type + " thất bại!",
                         "Lỗi",
                         JOptionPane.ERROR_MESSAGE);
             }
         }
     }

     private void handleExport(String type) {
         try {
             JFileChooser fileChooser = new JFileChooser();
             fileChooser.setDialogTitle("Chọn vị trí lưu file Excel");
             fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel Files", "xlsx"));
             
             if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                 String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                 if (!filePath.endsWith(".xlsx")) {
                     filePath += ".xlsx";
                 }
                 
                 boolean success = false;
                 switch (type) {
                     case "nhân viên":
                         if (permissionManager.hasPermission(currentUser, "EXPORT_STAFF")) {
                             success = exportToExcel(staffTable, filePath, "Danh sách nhân viên");
                         }
                         break;
                     case "quyền":
                         if (permissionManager.hasPermission(currentUser, "EXPORT_PERMISSIONS")) {
                             success = exportToExcel(permissionTable, filePath, "Danh sách quyền");
                         }
                         break;
                     case "tài khoản":
                         if (permissionManager.hasPermission(currentUser, "EXPORT_ACCOUNTS")) {
                             success = exportToExcel(accountTable, filePath, "Danh sách tài khoản");
                         }
                         break;
                 }
                 
                 if (success) {
                     JOptionPane.showMessageDialog(this,
                         "Xuất Excel thành công!",
                         "Thông báo",
                         JOptionPane.INFORMATION_MESSAGE);
                 } else {
                     JOptionPane.showMessageDialog(this,
                         "Xuất Excel thất bại!",
                         "Lỗi",
                         JOptionPane.ERROR_MESSAGE);
                 }
             }
         } catch (Exception e) {
             e.printStackTrace();
             JOptionPane.showMessageDialog(this,
                 "Lỗi khi xuất Excel: " + e.getMessage(),
                 "Lỗi",
                 JOptionPane.ERROR_MESSAGE);
         }
     }

     private boolean exportToExcel(JTable table, String filePath, String sheetName) {
         try {
             ExcelExporter exporter = new ExcelExporter();
             return exporter.exportTable(table, filePath, sheetName);
         } catch (Exception e) {
             e.printStackTrace();
             return false;
         }
     }

     private void handleTabChange() {
         String currentTab = getCurrentTabTitle();
         updateButtonPermissions(currentTab);
         searchField.setText("");
         handleSearch();
     }

     private void updateButtonPermissions(String type) {
         switch (type) {
             case "nhân viên":
                 addButton.setEnabled(permissionManager.hasPermission(currentUser, "ADD_STAFF"));
                 editButton.setEnabled(permissionManager.hasPermission(currentUser, "EDIT_STAFF"));
                 deleteButton.setEnabled(permissionManager.hasPermission(currentUser, "DELETE_STAFF"));
                 exportButton.setEnabled(permissionManager.hasPermission(currentUser, "EXPORT_STAFF"));
                 break;
                 
             case "quyền":
                 addButton.setEnabled(permissionManager.hasPermission(currentUser, "MANAGE_PERMISSIONS"));
                 editButton.setEnabled(permissionManager.hasPermission(currentUser, "MANAGE_PERMISSIONS"));
                 deleteButton.setEnabled(permissionManager.hasPermission(currentUser, "MANAGE_PERMISSIONS"));
                 exportButton.setEnabled(permissionManager.hasPermission(currentUser, "EXPORT_PERMISSIONS"));
                 break;
                 
             case "tài khoản":
                 addButton.setEnabled(permissionManager.hasPermission(currentUser, "MANAGE_ACCOUNTS"));
                 editButton.setEnabled(permissionManager.hasPermission(currentUser, "MANAGE_ACCOUNTS"));
                 deleteButton.setEnabled(permissionManager.hasPermission(currentUser, "MANAGE_ACCOUNTS"));
                 exportButton.setEnabled(permissionManager.hasPermission(currentUser, "EXPORT_ACCOUNTS"));
                 break;
         }
         refreshButton.setEnabled(true);
     }

     private String getCurrentTabTitle() {
         int selectedIndex = tabbedPane.getSelectedIndex();
         if (selectedIndex != -1) {
             return tabbedPane.getTitleAt(selectedIndex).toLowerCase();
         }
         return "";
     }

     private JTable getCurrentTable() {
         String currentTab = getCurrentTabTitle();
         switch (currentTab) {
             case "quản lý nhân viên":
                 return staffTable;
             case "phân quyền":
                 return permissionTable;
             case "tài khoản":
                 return accountTable;
             default:
                 return null;
         }
     }

     // Custom cell renderers
     private class StatusColumnRenderer extends DefaultTableCellRenderer {
         @Override
         public Component getTableCellRendererComponent(JTable table, Object value,
                 boolean isSelected, boolean hasFocus, int row, int column) {
             Component c = super.getTableCellRendererComponent(table, value,
                     isSelected, hasFocus, row, column);
             
             if (value != null) {
                 String status = value.toString();
                 if (status.equals("Đang hoạt động") || status.equals("active")) {
                     setForeground(new Color(40, 167, 69));
                 } else {
                     setForeground(new Color(220, 53, 69));
                 }
             }
             
             setHorizontalAlignment(JLabel.CENTER);
             return c;
         }
     }

     private class CenterAlignRenderer extends DefaultTableCellRenderer {
         public CenterAlignRenderer() {
             setHorizontalAlignment(JLabel.CENTER);
         }
     }
 }

 // ExcelExporter.java
 package util;

 import org.apache.poi.xssf.usermodel.*;
 import javax.swing.JTable;
 import java.io.FileOutputStream;

 public class ExcelExporter {
     public boolean exportTable(JTable table, String filePath, String sheetName) {
         try {
             XSSFWorkbook workbook = new XSSFWorkbook();
             XSSFSheet sheet = workbook.createSheet(sheetName);
             
             // Create header row
             XSSFRow headerRow = sheet.createRow(0);
             for (int i = 0; i < table.getColumnCount(); i++) {
                 XSSFCell cell = headerRow.createCell(i);
                 cell.setCellValue(table.getColumnName(i));
             }
             
             // Create data rows
             for (int i = 0; i < table.getRowCount(); i++) {
                 XSSFRow row = sheet.createRow(i + 1);
                 for (int j = 0; j < table.getColumnCount(); j++) {
                     XSSFCell cell = row.createCell(j);
                     if (table.getValueAt(i, j) != null) {
                         cell.setCellValue(table.getValueAt(i, j).toString());
                     }
                 }
             }
             
             // Auto size columns
             for (int i = 0; i < table.getColumnCount(); i++) {
                 sheet.autoSizeColumn(i);
             }
             
             // Write to file
             try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
                 workbook.write(fileOut);
             }
             workbook.close();
             return true;
             
         } catch (Exception e) {
             e.printStackTrace();
             return false;
         }
     }
 }
            }