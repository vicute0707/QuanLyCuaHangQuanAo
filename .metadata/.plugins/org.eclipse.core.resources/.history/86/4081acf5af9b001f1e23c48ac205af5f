package gui;

import javax.swing.*;

public class PhanQuyen extends JPanel {
    // Constants
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 242, 242);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
    
    // Components
    private JTable quyenTable;
    private DefaultTableModel tableModel;
    private JTextField searchField;
    
    public PhanQuyen() {
        setLayout(new BorderLayout());
        setBackground(Color.WHITE);
        setBorder(new EmptyBorder(20, 20, 20, 20));
        
        initializeComponents();
        setupLayout();
        loadSampleData();
    }
    
    private void initializeComponents() {
        // Initialize table
        String[] columns = {"Mã quyền", "Tên quyền truy cập"};
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        quyenTable = new JTable(tableModel);
        setupTable();
        
        // Initialize search field
        searchField = new JTextField(20);
        styleTextField(searchField);
    }
    
    private void setupLayout() {
        // Top Panel
        add(createTopPanel(), BorderLayout.NORTH);
        
        // Table Panel
        JScrollPane scrollPane = new JScrollPane(quyenTable);
        styleScrollPane(scrollPane);
        add(scrollPane, BorderLayout.CENTER);
    }
    
    private JPanel createTopPanel() {
        JPanel panel = new JPanel(new BorderLayout(20, 0));
        panel.setBackground(Color.WHITE);
        
        // Search Panel (Left)
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        searchPanel.setBackground(Color.WHITE);
        
        // Combo box "Tất cả"
        JComboBox<String> filterCombo = new JComboBox<>(new String[]{"Tất cả"});
        styleComboBox(filterCombo);
        
        // Search field and button
        JButton searchButton = createIconButton("/icon/search.png");
        
        searchPanel.add(filterCombo);
        searchPanel.add(searchField);
        searchPanel.add(searchButton);
        
        // Action Buttons Panel (Right)
        JPanel actionPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        actionPanel.setBackground(Color.WHITE);
        
        JButton addButton = createButton("Thêm quyền", "/icon/circle-plus.png", true);
        JButton editButton = createButton("Edit", "/icon/edit.png", false);
        JButton deleteButton = createButton("Xóa", "/icon/trash.png", false);
        JButton aboutButton = createButton("About", "/icon/info.png", false);
        JButton exportButton = createButton("Xuất Excel", "/icon/printer.png", false);
        
        addButton.setPreferredSize(new Dimension(150, 40));
        editButton.setPreferredSize(new Dimension(100, 40));
        deleteButton.setPreferredSize(new Dimension(100, 40));
        aboutButton.setPreferredSize(new Dimension(100, 40));
        exportButton.setPreferredSize(new Dimension(150, 40));
        
        // Add action listeners
        addButton.addActionListener(e -> showAddQuyenDialog());
        editButton.addActionListener(e -> editSelectedQuyen());
        deleteButton.addActionListener(e -> deleteSelectedQuyen());
        aboutButton.addActionListener(e -> showQuyenDetails());
        exportButton.addActionListener(e -> exportToExcel());
        
        actionPanel.add(addButton);
        actionPanel.add(editButton);
        actionPanel.add(deleteButton);
        actionPanel.add(aboutButton);
        actionPanel.add(exportButton);
        
        panel.add(searchPanel, BorderLayout.WEST);
        panel.add(actionPanel, BorderLayout.EAST);
        
        return panel;
    }
    
    private void setupTable() {
        quyenTable.setFont(CONTENT_FONT);
        quyenTable.setRowHeight(40);
        quyenTable.setGridColor(new Color(230, 230, 230));
        quyenTable.setShowHorizontalLines(true);
        quyenTable.setShowVerticalLines(true);
        
        // Setup header
        JTableHeader header = quyenTable.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(CONTENT_COLOR);
        header.setForeground(Color.BLACK);
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
        
        // Setup column widths
        quyenTable.getColumnModel().getColumn(0).setPreferredWidth(150); // Mã quyền
        quyenTable.getColumnModel().getColumn(1).setPreferredWidth(450); // Tên quyền
        
        // Center align for Mã quyền
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        quyenTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
    }
    
    // Helper methods for styling components
    private void styleTextField(JTextField field) {
        field.setPreferredSize(new Dimension(200, 40));
        field.setFont(CONTENT_FONT);
        field.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230)),
            new EmptyBorder(5, 10, 5, 10)
        ));
    }
    
    private void styleComboBox(JComboBox<String> comboBox) {
        comboBox.setPreferredSize(new Dimension(100, 40));
        comboBox.setFont(CONTENT_FONT);
        comboBox.setBackground(Color.WHITE);
    }
    
    private JButton createButton(String text, String iconPath, boolean isPrimary) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        if (iconPath != null) {
            button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
        }
        
        if (isPrimary) {
            button.setBackground(PRIMARY_COLOR);
            button.setForeground(Color.WHITE);
        } else {
            button.setBackground(Color.WHITE);
            button.setForeground(Color.BLACK);
        }
        
        button.setBorder(new LineBorder(isPrimary ? PRIMARY_COLOR : new Color(230, 230, 230)));
        button.setFocusPainted(false);
        
        // Add hover effect
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (isPrimary) {
                    button.setBackground(PRIMARY_COLOR.darker());
                } else {
                    button.setBackground(HOVER_COLOR);
                }
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                if (isPrimary) {
                    button.setBackground(PRIMARY_COLOR);
                } else {
                    button.setBackground(Color.WHITE);
                }
            }
        });
        
        return button;
    }
    
    private JButton createIconButton(String iconPath) {
        JButton button = new JButton(new ImageIcon(getClass().getResource(iconPath)));
        button.setPreferredSize(new Dimension(40, 40));
        button.setBackground(Color.WHITE);
        button.setBorder(new LineBorder(new Color(230, 230, 230)));
        button.setFocusPainted(false);
        return button;
    }
    
    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setBorder(new LineBorder(new Color(230, 230, 230)));
        scrollPane.getViewport().setBackground(Color.WHITE);
    }
    
    // Action methods
    private void showAddQuyenDialog() {
        // Implement add permission dialog
        // Similar to the one we created for ThemDonNhap
    }
    
    private void editSelectedQuyen() {
        int selectedRow = quyenTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn quyền cần chỉnh sửa!",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Implement edit functionality
    }
    
    private void deleteSelectedQuyen() {
        int selectedRow = quyenTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn quyền cần xóa!",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc muốn xóa quyền này?",
            "Xác nhận xóa",
            JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            tableModel.removeRow(selectedRow);
        }
    }
    
    private void showQuyenDetails() {
        int selectedRow = quyenTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn quyền để xem chi tiết!",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Implement show details functionality
    }
    
    private void exportToExcel() {
        // Implement export functionality
    }
    
    private void loadSampleData() {
        String[][] sampleData = {
            {"Q001", "Quản lí cửa hàng"},
            {"Q002", "Quản lí nhân viên"},
            {"Q003", "Quản lí kho"},
            {"Q004", "Quản lí bán hàng"},
            {"Q005", "Quản lí báo cáo"}
        };
        
        for (String[] row : sampleData) {
            tableModel.addRow(row);
        }
    }
}
