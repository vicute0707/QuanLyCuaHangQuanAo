package dialog;

import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableModel;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;

public class ThemNhanVienDialog extends JDialog {
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private DefaultTableModel tableModel;
    private SimpleDateFormat dateFormat;
    
    public ThemNhanVienDialog(Frame owner, DefaultTableModel tableModel) {
        super(owner, "Thêm nhân viên mới", true);
        this.tableModel = tableModel;
        this.dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        initComponents();
    }
    
    private void initComponents() {
        setSize(600, 700);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());
        
        // Main content panel with scroll
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.setBackground(Color.WHITE);

        // Form panel
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBackground(Color.WHITE);
        formPanel.setBorder(new EmptyBorder(20, 25, 20, 25));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(8, 5, 8, 5);
        gbc.weightx = 1.0;
        gbc.gridwidth = 2;
        
        int gridy = 0;

        // Thông tin cơ bản section
        addSectionHeader(formPanel, "Thông tin cơ bản", gbc, gridy++);

        // Mã nhân viên
        JTextField idField = createFormField("Mã nhân viên:", formPanel, gbc, gridy++);
        idField.setText(generateNextEmployeeId());
        idField.setEditable(false);
        idField.setBackground(new Color(245, 245, 245));

        // Họ và tên
        JTextField nameField = createFormField("Họ và tên: *", formPanel, gbc, gridy++);

        // Giới tính
        JPanel genderPanel = createGenderPanel();
        gbc.gridy = gridy++;
        formPanel.add(genderPanel, gbc);

        // Ngày sinh
       
        gbc.gridy = gridy++;
        formPanel.add(birthDatePanel, gbc);

        // Địa chỉ section
        addSectionHeader(formPanel, "Địa chỉ", gbc, gridy++);
        JTextField addressField = createFormField("Địa chỉ:", formPanel, gbc, gridy++);
        JTextField cityField = createFormField("Thành phố:", formPanel, gbc, gridy++);
        JPanel provincePanel = createProvincePanel();
        gbc.gridy = gridy++;
        formPanel.add(provincePanel, gbc);

        // Thông tin liên hệ section
        addSectionHeader(formPanel, "Thông tin liên hệ", gbc, gridy++);
        JTextField phoneField = createFormField("Số điện thoại: *", formPanel, gbc, gridy++);
        JTextField emailField = createFormField("Email: *", formPanel, gbc, gridy++);

        // Thông tin công việc section
        addSectionHeader(formPanel, "Thông tin công việc", gbc, gridy++);
        JPanel departmentPanel = createDepartmentPanel();
        gbc.gridy = gridy++;
        formPanel.add(departmentPanel, gbc);

        JPanel positionPanel = createPositionPanel();
        gbc.gridy = gridy++;
        formPanel.add(positionPanel, gbc);

        // Add form panel to scroll pane
        JScrollPane scrollPane = new JScrollPane(formPanel);
        scrollPane.setBorder(null);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        // Required fields note
        JPanel notePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        notePanel.setBackground(Color.WHITE);
        notePanel.setBorder(new EmptyBorder(0, 25, 10, 25));
        JLabel noteLabel = new JLabel("(*) Thông tin bắt buộc");
        noteLabel.setFont(new Font(CONTENT_FONT.getName(), Font.ITALIC, 11));
        noteLabel.setForeground(new Color(150, 150, 150));
        notePanel.add(noteLabel);
        mainPanel.add(notePanel, BorderLayout.SOUTH);
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setPreferredSize(new Dimension(200, 35));
        dateChooser.setFont(CONTENT_FONT);
        dateChooser.setDateFormatString("dd/MM/yyyy");
        

        gbc.gridy = gridy++;
        formPanel.add(birthDatePanel, gbc);
        // Buttons panel
        JPanel buttonPanel = createButtonPanel(
                nameField, 
                phoneField, 
                emailField, 
                dateChooser,  // Pass the JDateChooser directly
                (JComboBox<String>)((JPanel)genderPanel.getComponent(2)).getComponent(0),
                idField,
                addressField,
                cityField,
                (JComboBox<String>)((JPanel)provincePanel.getComponent(2)).getComponent(0),
                (JComboBox<String>)((JPanel)departmentPanel.getComponent(2)).getComponent(0),
                (JComboBox<String>)((JPanel)positionPanel.getComponent(2)).getComponent(0)
            );
        add(mainPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
    }

    private void addSectionHeader(JPanel panel, String title, GridBagConstraints gbc, int gridy) {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(Color.WHITE);
        headerPanel.setBorder(new EmptyBorder(10, 0, 5, 0));

        JLabel headerLabel = new JLabel(title);
        headerLabel.setFont(new Font(HEADER_FONT.getName(), Font.BOLD, 13));
        headerLabel.setForeground(PRIMARY_COLOR);
        headerPanel.add(headerLabel, BorderLayout.CENTER);

        JSeparator separator = new JSeparator();
        separator.setForeground(new Color(230, 230, 230));
        headerPanel.add(separator, BorderLayout.SOUTH);

        gbc.gridy = gridy;
        panel.add(headerPanel, gbc);
    }

    private JTextField createFormField(String labelText, JPanel panel, GridBagConstraints gbc, int row) {
        JPanel fieldPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        fieldPanel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel(labelText);
        label.setFont(CONTENT_FONT);
        
        JTextField textField = new JTextField();
        textField.setPreferredSize(new Dimension(200, 35));
        textField.setFont(CONTENT_FONT);
        textField.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        fieldPanel.add(label);
        fieldPanel.add(Box.createHorizontalStrut(labelText.equals("Email:") ? 87 : 
                      labelText.equals("Số điện thoại:") ? 45 : 65));
        fieldPanel.add(textField);
        
        gbc.gridy = row;
        gbc.gridx = 0;
        gbc.gridwidth = 2;
        panel.add(fieldPanel, gbc);
        
        return textField;
    }

    private JPanel createGenderPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Giới tính: *");
        label.setFont(CONTENT_FONT);
        
        String[] genders = {"Nam", "Nữ"};
        JComboBox<String> comboBox = new JComboBox<>(genders);
        comboBox.setFont(CONTENT_FONT);
        comboBox.setPreferredSize(new Dimension(200, 35));
        comboBox.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(63));
        panel.add(comboBox);
        
        return panel;
    }

    private JPanel createBirthDatePanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Ngày sinh: *");
        label.setFont(CONTENT_FONT);
        
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setPreferredSize(new Dimension(200, 35));
        dateChooser.setFont(CONTENT_FONT);
        dateChooser.setDateFormatString("dd/MM/yyyy");
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(60));
        panel.add(dateChooser);
        
        return panel;
    }

    private JPanel createProvincePanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Tỉnh/Thành phố:");
        label.setFont(CONTENT_FONT);
        
        String[] provinces = {"Hà Nội", "TP.HCM", "Đà Nẵng", "Hải Phòng", "Cần Thơ"};
        JComboBox<String> comboBox = new JComboBox<>(provinces);
        comboBox.setFont(CONTENT_FONT);
        comboBox.setPreferredSize(new Dimension(200, 35));
        comboBox.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(40));
        panel.add(comboBox);
        
        return panel;
    }

    private JPanel createDepartmentPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Phòng ban:");
        label.setFont(CONTENT_FONT);
        
        String[] departments = {"Kỹ thuật", "Kinh doanh", "Nhân sự", "Kế toán", "Marketing"};
        JComboBox<String> comboBox = new JComboBox<>(departments);
        comboBox.setFont(CONTENT_FONT);
        comboBox.setPreferredSize(new Dimension(200, 35));
        comboBox.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(55));
        panel.add(comboBox);
        
        return panel;
    }

    private JPanel createPositionPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("Chức vụ:");
        label.setFont(CONTENT_FONT);
        
        String[] positions = {"Nhân viên", "Trưởng nhóm", "Quản lý", "Giám đốc"};
        JComboBox<String> comboBox = new JComboBox<>(positions);
        comboBox.setFont(CONTENT_FONT);
        comboBox.setPreferredSize(new Dimension(200, 35));
        comboBox.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        panel.add(label);
        panel.add(Box.createHorizontalStrut(70));
        panel.add(comboBox);
        
        return panel;
    }

    private JPanel createButtonPanel(JTextField nameField, JTextField phoneField, 
            JTextField emailField, JDateChooser birthDateChooser,
            JComboBox<String> genderCombo, JTextField idField,
            JTextField addressField, JTextField cityField,
            JComboBox<String> provinceCombo, 
            JComboBox<String> departmentCombo,
            JComboBox<String> positionCombo) {
JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 15));
buttonPanel.setBackground(Color.WHITE);
buttonPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(230, 230, 230)));

JButton saveButton = createButton("Lưu", true);
saveButton.setPreferredSize(new Dimension(120, 40));
saveButton.addActionListener(e -> {
if (validateFields(nameField, phoneField, emailField, birthDateChooser)) {
saveEmployee(nameField.getText(), genderCombo.getSelectedItem().toString(),
    birthDateChooser.getDate(), addressField.getText(),
    cityField.getText(), provinceCombo.getSelectedItem().toString(),
    phoneField.getText(), emailField.getText(),
    departmentCombo.getSelectedItem().toString(),
    positionCombo.getSelectedItem().toString());
dispose();
}
});

JButton cancelButton = createButton("Hủy", false);
cancelButton.setPreferredSize(new Dimension(120, 40));
cancelButton.addActionListener(e -> dispose());

buttonPanel.add(saveButton);
buttonPanel.add(Box.createHorizontalStrut(10));
buttonPanel.add(cancelButton);

return buttonPanel;
}
    private JButton createButton(String text, boolean isPrimary) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        
        if (isPrimary) {
            button.setBackground(PRIMARY_COLOR);
            button.setForeground(Color.WHITE);
        } else {
            button.setBackground(Color.WHITE);
            button.setForeground(Color.BLACK);
            button.setBorder(new LineBorder(new Color(230, 230, 230), 1));
        }

        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (button.getBackground().equals(PRIMARY_COLOR)) {
                    button.setBackground(PRIMARY_COLOR.darker());
                } else {
                    button.setBackground(HOVER_COLOR);
                }
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                if (button.getForeground().equals(Color.WHITE)) {
                    button.setBackground(PRIMARY_COLOR);
                } else {
                    button.setBackground(Color.WHITE);
                }
            }
        });
        
        return button;
    }

    private boolean validateFields(JTextField nameField, JTextField phoneField, 
                                 JTextField emailField, JDateChooser birthDateChooser) {
        // Validate name
        if (nameField.getText().trim().isEmpty()) {
            showError("Vui lòng nhập họ và tên", nameField);
            return false;
        }
        if (!nameField.getText().trim().matches("^[\\p{L} .'-]+$")) {
            showError("Họ và tên không hợp lệ", nameField);
            return false;
        }

        // Validate birth date
        if (birthDateChooser.getDate() == null) {
            showError("Vui lòng chọn ngày sinh", birthDateChooser);
            return false;
        }
        // Check if date is not in future
        if (birthDateChooser.getDate().after(new Date())) {
            showError("Ngày sinh không thể là ngày trong tương lai", birthDateChooser);
            return false;
        }

        // Validate phone number
        if (phoneField.getText().trim().isEmpty()) {
            showError("Vui lòng nhập số điện thoại", phoneField);
            return false;
        }
        if (!phoneField.getText().matches("\\d{10}")) {
            showError("Số điện thoại không hợp lệ (phải có 10 chữ số)", phoneField);
            return false;
        }

        // Validate email
        if (emailField.getText().trim().isEmpty()) {
            showError("Vui lòng nhập email", emailField);
            return false;
        }
        if (!emailField.getText().matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            showError("Email không hợp lệ", emailField);
            return false;
        }
        
        return true;
    }

    private void showError(String message, Component component) {
        JOptionPane.showMessageDialog(this,
            message,
            "Lỗi",
            JOptionPane.ERROR_MESSAGE);
        component.requestFocus();
    }

    private String generateNextEmployeeId() {
        int maxId = 0;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String id = (String) tableModel.getValueAt(i, 0);
            try {
                int num = Integer.parseInt(id.substring(2)); // Skip "NV" prefix
                maxId = Math.max(maxId, num);
            } catch (Exception e) {
                // Skip invalid IDs
            }
        }
        return "NV" + String.format("%03d", maxId + 1);
    }

    private void saveEmployee(String name, String gender, Date birthDate, 
                            String address, String city, String province,
                            String phone, String email, 
                            String department, String position) {
        try {
            // Create row data
            Object[] rowData = {
                generateNextEmployeeId(),
                name.trim(),
                gender,
                dateFormat.format(birthDate),
                phone.trim(),
                email.trim(),
                address.trim(),
                city.trim(),
                province,
                department,
                position
            };
            
            // Add to table
            tableModel.addRow(rowData);
            
            // Show success message
            JOptionPane.showMessageDialog(this,
                "Thêm nhân viên thành công!",
                "Thông báo",
                JOptionPane.INFORMATION_MESSAGE);
                
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                "Có lỗi xảy ra khi thêm nhân viên: " + e.getMessage(),
                "Lỗi",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    // Custom ComboBox class for consistent styling
    private class CustomComboBox extends JComboBox<String> {
        public CustomComboBox(String[] items) {
            super(items);
            setFont(CONTENT_FONT);
            setBackground(Color.WHITE);
            setBorder(BorderFactory.createCompoundBorder(
                new LineBorder(new Color(230, 230, 230), 1),
                BorderFactory.createEmptyBorder(5, 10, 5, 10)
            ));
            
            setRenderer(new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(JList<?> list, Object value,
                        int index, boolean isSelected, boolean cellHasFocus) {
                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
                    setFont(CONTENT_FONT);
                    
                    if (isSelected) {
                        setBackground(HOVER_COLOR);
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(Color.WHITE);
                        setForeground(Color.BLACK);
                    }
                    return this;
                }
            });
        }
    }

    // Custom ScrollBarUI for consistent styling
    private class CustomScrollBarUI extends javax.swing.plaf.basic.BasicScrollBarUI {
        @Override
        protected void configureScrollBarColors() {
            this.thumbColor = PRIMARY_COLOR;
            this.trackColor = Color.WHITE;
        }

        @Override
        protected JButton createDecreaseButton(int orientation) {
            return createZeroButton();
        }

        @Override
        protected JButton createIncreaseButton(int orientation) {
            return createZeroButton();
        }

        private JButton createZeroButton() {
            JButton button = new JButton();
            button.setPreferredSize(new Dimension(0, 0));
            button.setMinimumSize(new Dimension(0, 0));
            button.setMaximumSize(new Dimension(0, 0));
            return button;
        }

        @Override
        protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
            if (thumbBounds.isEmpty() || !scrollbar.isEnabled()) {
                return;
            }

            Graphics2D g2 = (Graphics2D) g.create();
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setPaint(thumbColor);
            g2.fillRoundRect(thumbBounds.x, thumbBounds.y,
                    thumbBounds.width, thumbBounds.height, 8, 8);
            g2.dispose();
        }

        @Override
        protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
            Graphics2D g2 = (Graphics2D) g.create();
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setPaint(trackColor);
            g2.fillRect(trackBounds.x, trackBounds.y,
                    trackBounds.width, trackBounds.height);
            g2.dispose();
        }
    }
}