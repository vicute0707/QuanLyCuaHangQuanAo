package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.BasicStroke;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.RoundRectangle2D;
import javax.swing.border.AbstractBorder;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;

public class Form_SanPham extends JPanel {
    
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 192, 203);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 13);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13);
    
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField searchField;
    
    // Custom rounded border class
    class RoundedBorder extends AbstractBorder {
        private final int radius;
        private final Color color;
        
        RoundedBorder(int radius, Color color) {
            this.radius = radius;
            this.color = color;
        }
        
        @Override
        public void paintBorder(java.awt.Component c, Graphics g, int x, int y, int width, int height) {
            Graphics2D g2 = (Graphics2D) g.create();
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setColor(color);
            g2.setStroke(new BasicStroke(1));
            g2.draw(new RoundRectangle2D.Double(x, y, width - 1, height - 1, radius, radius));
            g2.dispose();
        }
    }
    
    // Custom JButton with rounded corners
    class RoundedButton extends JButton {
        public RoundedButton(String text) {
            super(text);
            setContentAreaFilled(false);
            setFocusPainted(false);
            setBorderPainted(false);
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            Graphics2D g2 = (Graphics2D) g.create();
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            if (getModel().isPressed()) {
                g2.setColor(getBackground().darker());
            } else if (getModel().isRollover()) {
                g2.setColor(getBackground().brighter());
            } else {
                g2.setColor(getBackground());
            }
            
            g2.fill(new RoundRectangle2D.Double(0, 0, getWidth() - 1, getHeight() - 1, 15, 15));
            g2.dispose();
            
            super.paintComponent(g);
        }
    }
    
    // Custom JComboBox with rounded corners
    class RoundedComboBox extends JComboBox<String> {
        public RoundedComboBox(String[] items) {
            super(items);
            setBackground(Color.WHITE);
            setBorder(new RoundedBorder(10, Color.GRAY));
            setRenderer(new DefaultListCellRenderer() {
                @Override
                public java.awt.Component getListCellRendererComponent(JList<?> list, Object value, int index,
                        boolean isSelected, boolean cellHasFocus) {
                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    setFont(CONTENT_FONT);
                    setBorder(new EmptyBorder(5, 10, 5, 10));
                    return this;
                }
            });
        }
    }
    
    public Form_SanPham() {
        initComponents();
    }
    
    private void initComponents() {
        setLayout(new BorderLayout());
        setBackground(Color.WHITE);
        setBorder(new EmptyBorder(10, 10, 10, 10));
        
        add(createTopPanel(), BorderLayout.NORTH);
        add(createTablePanel(), BorderLayout.CENTER);
    }
    
    private JPanel createTopPanel() {
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.setBackground(Color.WHITE);
        topPanel.setBorder(new EmptyBorder(0, 0, 10, 0));
        
        JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        leftPanel.setBackground(Color.WHITE);
        
        // Styled ComboBox
        RoundedComboBox filterCombo = new RoundedComboBox(new String[]{"Tất cả"});
        filterCombo.setPreferredSize(new Dimension(120, 35));
        
        searchField = new JTextField();
        searchField.setPreferredSize(new Dimension(200, 35));
        searchField.setFont(CONTENT_FONT);
        searchField.setBorder(new RoundedBorder(10, Color.GRAY));
        
        JButton searchButton = createButton("", "/icon/search.png");
        
        leftPanel.add(filterCombo);
        leftPanel.add(searchField);
        leftPanel.add(searchButton);
        
        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 12, 0));
        rightPanel.setBackground(Color.WHITE);
        
        // Styled buttons
        RoundedButton addButton = new RoundedButton("Thêm sản phẩm");
        styleButton(addButton, "/icon/circle-plus.png", PRIMARY_COLOR, Color.WHITE);
        addButton.setPreferredSize(new Dimension(160, 40));
        
        RoundedButton editButton = new RoundedButton("Edit");
        styleButton(editButton, "/icon/pencil.png", new Color(64, 164, 216), Color.WHITE);
        
        RoundedButton deleteButton = new RoundedButton("Xóa");
        styleButton(deleteButton, "/icon/trash.png", new Color(239, 68, 68), Color.WHITE);
        
        RoundedButton infoButton = new RoundedButton("About");
        styleButton(infoButton, "/icon/info.png", new Color(79, 70, 229), Color.WHITE);
        
        RoundedButton exportButton = new RoundedButton("Xuất Excel");
        styleButton(exportButton, "/icon/printer.png", new Color(34, 197, 94), Color.WHITE);
        exportButton.setPreferredSize(new Dimension(140, 35));
        
        rightPanel.add(addButton);
        rightPanel.add(editButton);
        rightPanel.add(deleteButton);
        rightPanel.add(infoButton);
        rightPanel.add(exportButton);
        
        topPanel.add(leftPanel, BorderLayout.WEST);
        topPanel.add(rightPanel, BorderLayout.EAST);
        
        return topPanel;
    }
    
    private JPanel createTablePanel() {
        JPanel tablePanel = new JPanel(new BorderLayout());
        tablePanel.setBackground(Color.WHITE);
        
        String[] columns = new String[]{
            "Mã SP", "Tên sản phẩm", "Danh mục", "Số lượng tồn", 
            "Giá nhập", "Giá bán", "Thương hiệu", "Tình trạng"
        };
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table = new JTable(tableModel);
        table.setFont(CONTENT_FONT);
        table.setRowHeight(35);
        table.setGridColor(new Color(230, 230, 230));
        table.setShowVerticalLines(true);
        table.setShowHorizontalLines(true);
        
        // Improved table header
        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(new Color(245, 245, 245));
        header.setForeground(Color.BLACK);
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
        
        // Auto-resize table columns
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        
        // Create scroll pane with custom styling
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.getViewport().setBackground(Color.WHITE);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(230, 230, 230)));
        
        // Always show scrollbars
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        
        // Custom scrollbar styling
        scrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
        	 @Override
             protected void configureScrollBarColors() {
                 this.thumbColor = new Color(200, 200, 200);
                 this.trackColor = Color.WHITE;
        	
        });
       
 
        tablePanel.add(scrollPane, BorderLayout.CENTER);
        addSampleData();
        
        return tablePanel;
    }
    
    private void styleButton(RoundedButton button, String iconPath, Color bgColor, Color fgColor) {
        button.setFont(CONTENT_FONT);
        if (iconPath != null && !iconPath.isEmpty()) {
            button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
        }
        button.setBackground(bgColor);
        button.setForeground(fgColor);
        button.setPreferredSize(new Dimension(button.getText().isEmpty() ? 40 : 120, 35));
    }
    
    private JButton createButton(String text, String iconPath) {
        RoundedButton button = new RoundedButton(text);
        styleButton(button, iconPath, Color.WHITE, Color.BLACK);
        return button;
    }
    
    private void addSampleData() {
        Object[][] data = {
            {"SP001", "Váy ngắn kẻ caro", "Váy", 36, "200,000 vnd", "250,000 vnd", "VietNam", "Còn hàng"},
            {"SP002", "Quần dài", "Quần", 3, "200,000 vnd", "250,000 vnd", "Shien", "Sắp hết"},
            {"SP003", "Áo thun trơn", "Áo", 0, "120,000 vnd", "199,000 vnd", "T-Lab", "Hết hàng"}
        };
        
        for (Object[] row : data) {
            tableModel.addRow(row);
        }
        
        // Set custom cell renderer for status column
        table.getColumnModel().getColumn(7).setCellRenderer((table, value, isSelected, hasFocus, row, column) -> {
            JLabel label = new JLabel(value.toString());
            label.setOpaque(true);
            label.setHorizontalAlignment(JLabel.CENTER);
            label.setFont(CONTENT_FONT);
            
            switch (value.toString()) {
                case "Còn hàng":
                    label.setForeground(new Color(0, 128, 0));
                    break;
                case "Sắp hết":
                    label.setForeground(new Color(255, 140, 0));
                    break;
                case "Hết hàng":
                    label.setForeground(Color.RED);
                    break;
            }
            
            if (isSelected) {
                label.setBackground(table.getSelectionBackground());
            } else {
                label.setBackground(table.getBackground());
            }
            
            return label;
        });
    }
}