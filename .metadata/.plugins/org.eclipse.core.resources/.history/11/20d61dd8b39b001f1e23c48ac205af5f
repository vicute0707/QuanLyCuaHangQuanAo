package gui;

import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.*;
import javax.swing.table.*;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;

import dialog.SuaNhanVienDialog;
import dialog.ThemNhanVienDialog;

public class Form_NhanVien extends JPanel {

    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 192, 203);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
    private static final Font TAB_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 14);
    private int selectedRow = -1;
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField searchField;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private JTabbedPane tabbedPane;

    public Form_NhanVien() {
        setLayout(new BorderLayout());
        initComponents();
    }

    private void initComponents() {
        setBackground(Color.WHITE);
        tabbedPane = new JTabbedPane();
        tabbedPane.setFont(TAB_FONT);
        tabbedPane.setBackground(Color.WHITE);
        
        JPanel quanLyNVPanel = createQuanLyNhanVienPanel();
        JPanel phanQuyenPanel = createPhanQuyenPanel();
        
        styleTabbedPane();
        
        tabbedPane.addTab("Quản lý nhân viên", quanLyNVPanel);
        tabbedPane.addTab("Phân quyền", phanQuyenPanel);
        
        add(tabbedPane, BorderLayout.CENTER);
        
        tabbedPane.setOpaque(true);
        tabbedPane.setBackground(Color.WHITE);
        setOpaque(true);
    }

    private void styleTabbedPane() {
        // [Giữ nguyên phương thức styleTabbedPane()]
    }

    private JPanel createQuanLyNhanVienPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        // Top Controls Panel
        JPanel topControls = new JPanel(new BorderLayout(20, 0));
        topControls.setBackground(Color.WHITE);
        topControls.setBorder(new EmptyBorder(20, 30, 20, 30));
        
        // Search panel
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        searchPanel.setBackground(Color.WHITE);
        
        JTextField searchField = new JTextField(20);
        styleTextField(searchField);
        
        JButton searchBtn = createRoundedButton("", "/icon/search.png", false);
        
        searchPanel.add(searchField);
        searchPanel.add(searchBtn);
        
        // Action buttons panel
        JPanel actionPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        actionPanel.setBackground(Color.WHITE);
        
        JButton addBtn = createRoundedButton("Thêm nhân viên", "/icon/circle-plus.png", true);
        addBtn.setBackground(PRIMARY_COLOR);
        addBtn.setForeground(Color.WHITE);
        addBtn.setPreferredSize(new Dimension(150, 38));
        
        JButton editBtn = createRoundedButton("Sửa", "/icon/pencil.png", true);
        JButton deleteBtn = createRoundedButton("Xóa", "/icon/trash.png", true);
        JButton aboutBtn = createRoundedButton("About", "/icon/info.png", true);
        JButton exportBtn = createRoundedButton("Xuất Excel", "/icon/printer.png", true);
        exportBtn.setPreferredSize(new Dimension(150, 38));
        
        actionPanel.add(addBtn);
        actionPanel.add(editBtn);
        actionPanel.add(deleteBtn);
        actionPanel.add(aboutBtn);
        actionPanel.add(exportBtn);
        
        topControls.add(searchPanel, BorderLayout.WEST);
        topControls.add(actionPanel, BorderLayout.EAST);
        
        // Table
        String[] columns = {"Mã NV", "Họ và tên", "Giới tính", "Ngày sinh", "SDT", "Email"};
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        table = new JTable(tableModel);
        styleTable(table);
        
        JScrollPane scrollPane = new JScrollPane(table);
        styleScrollPane(scrollPane);
        
        // Add components to panel
        panel.add(topControls, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }

    private JPanel createPhanQuyenPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        // Top Controls Panel
        JPanel topControls = new JPanel(new BorderLayout(20, 0));
        topControls.setBackground(Color.WHITE);
        topControls.setBorder(new EmptyBorder(20, 30, 20, 30));
        
        // Search panel
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        searchPanel.setBackground(Color.WHITE);
        
        JTextField quyenSearchField = new JTextField(20);
        styleTextField(quyenSearchField);
        
        JButton searchBtn = createRoundedButton("", "/icon/search.png", false);
        
        searchPanel.add(quyenSearchField);
        searchPanel.add(searchBtn);
        
        // Action buttons panel
        JPanel actionPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        actionPanel.setBackground(Color.WHITE);
        
        JButton addQuyenBtn = createRoundedButton("Thêm quyền", "/icon/circle-plus.png", true);
        addQuyenBtn.setBackground(PRIMARY_COLOR);
        addQuyenBtn.setForeground(Color.WHITE);
        addQuyenBtn.setPreferredSize(new Dimension(150, 38));
        
        JButton editBtn = createRoundedButton("Sửa", "/icon/pencil.png", true);
        JButton deleteBtn = createRoundedButton("Xóa", "/icon/trash.png", true);
        JButton aboutBtn = createRoundedButton("About", "/icon/info.png", true);
        JButton exportBtn = createRoundedButton("Xuất Excel", "/icon/printer.png", true);
        exportBtn.setPreferredSize(new Dimension(150, 38));
        
        actionPanel.add(addQuyenBtn);
        actionPanel.add(editBtn);
        actionPanel.add(deleteBtn);
        actionPanel.add(aboutBtn);
        actionPanel.add(exportBtn);
        
        topControls.add(searchPanel, BorderLayout.WEST);
        topControls.add(actionPanel, BorderLayout.EAST);
        
        // Table
        String[] columns = {"Mã quyền", "Tên quyền truy cập"};
        DefaultTableModel quyenModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        JTable quyenTable = new JTable(quyenModel);
        styleQuyenTable(quyenTable);
        
        JScrollPane scrollPane = new JScrollPane(quyenTable);
        styleScrollPane(scrollPane);
        
        // Add components to panel
        panel.add(topControls, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        // Load sample data
        loadSampleQuyenData(quyenModel);
        
        return panel;
    }
    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setBorder(new LineBorder(new Color(230, 230, 230)));
        scrollPane.getViewport().setBackground(Color.WHITE);
        scrollPane.setBackground(Color.WHITE);
        
        // Style thanh cuộn
        scrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = PRIMARY_COLOR;
                this.trackColor = Color.WHITE;
            }
            
            @Override
            protected JButton createDecreaseButton(int orientation) {
                return createZeroButton();
            }
            
            @Override
            protected JButton createIncreaseButton(int orientation) {
                return createZeroButton();
            }
            
            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                button.setMinimumSize(new Dimension(0, 0));
                button.setMaximumSize(new Dimension(0, 0));
                return button;
            }
        });
    }
    
    private void styleTable(JTable table) {
        table.setFont(CONTENT_FONT);
        table.setRowHeight(40);
        table.setGridColor(new Color(230, 230, 230));
        table.setShowVerticalLines(true);
        table.setShowHorizontalLines(true);
        table.setSelectionBackground(HOVER_COLOR);
        table.setSelectionForeground(Color.BLACK);
        table.setBackground(Color.WHITE);
        
        // Header styling
        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(Color.WHITE);
        header.setForeground(Color.BLACK);
        header.setBorder(new LineBorder(new Color(230, 230, 230)));
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
        
        // Center align for specific columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
    }
    
    private void styleQuyenTable(JTable table) {
        table.setFont(CONTENT_FONT);
        table.setRowHeight(40);
        table.setGridColor(new Color(230, 230, 230));
        table.setShowVerticalLines(true);
        table.setShowHorizontalLines(true);
        table.setSelectionBackground(HOVER_COLOR);
        table.setSelectionForeground(Color.BLACK);
        table.setBackground(Color.WHITE);
        
        // Header styling
        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(Color.WHITE);
        header.setForeground(Color.BLACK);
        header.setBorder(new LineBorder(new Color(230, 230, 230)));
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
        
        // Center align for Mã quyền column
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        centerRenderer.setBackground(Color.WHITE);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        
        // Set column widths
        table.getColumnModel().getColumn(0).setPreferredWidth(150);
        table.getColumnModel().getColumn(1).setPreferredWidth(450);
    }
    
    private void styleTextField(JTextField field) {
        field.setPreferredSize(new Dimension(200, 38));
        field.setFont(CONTENT_FONT);
        field.setBackground(Color.WHITE);
        field.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230)),
            new EmptyBorder(5, 10, 5, 10)
        ));
    }
    
    private JButton createRoundedButton(String text, String iconPath, boolean withText) {
        JButton button = new JButton();
        button.setFont(CONTENT_FONT);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setBackground(Color.WHITE);
        button.setBorder(new LineBorder(new Color(230, 230, 230), 1));
        
        if (withText) {
            button.setText(text);
            button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
            button.setIconTextGap(10);
            button.setPreferredSize(new Dimension(120, 38));
        } else {
            button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
            button.setPreferredSize(new Dimension(38, 38));
        }
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (button.getBackground().equals(PRIMARY_COLOR)) return;
                button.setBackground(HOVER_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                if (button.getBackground().equals(PRIMARY_COLOR)) return;
                button.setBackground(Color.WHITE);
            }
        });
        
        return button;
    }

    private void showAddDialog() {
        ThemNhanVienDialog dialog = new ThemNhanVienDialog(
            (Frame) SwingUtilities.getWindowAncestor(this), 
            tableModel
        );
        dialog.setVisible(true);
    }

    private void showEditDialog() {
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một nhân viên để chỉnh sửa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        else {
            SuaNhanVienDialog dialog = new SuaNhanVienDialog(
                (Frame) SwingUtilities.getWindowAncestor(this), 
                tableModel,   
                selectedRow   
            );
            dialog.setVisible(true);
        }
    }

    private void deleteEmployee() {
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một nhân viên để xóa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc chắn muốn xóa nhân viên này?",
            "Xác nhận xóa",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            tableModel.removeRow(selectedRow);
            selectedRow = -1;
            JOptionPane.showMessageDialog(this,
                "Xóa nhân viên thành công!",
                "Thông báo",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void performSearch(String searchText) {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
        table.setRowSorter(sorter);
        
        if (searchText.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
        }
    }

    private void loadSampleQuyenData(DefaultTableModel model) {
        String[][] sampleData = {
            {"Q001", "Quản lí cửa hàng"},
            {"Q002", "Quản lí nhân viên"},
            {"Q003", "Quản lí kho"},
            {"Q004", "Quản lí bán hàng"},
            {"Q005", "Quản lí báo cáo"}
        };
        
        for (String[] row : sampleData) {
            model.addRow(row);
        }
    }
    

    // [Giữ nguyên các phương thức phụ trợ khác như styleScrollPane(), styleTable(), styleQuyenTable(), etc.]
}