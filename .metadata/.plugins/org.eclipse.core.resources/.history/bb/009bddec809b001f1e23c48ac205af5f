package gui;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import org.jdatepicker.impl.*;
import org.jdatepicker.util.JDatePickerUtil;

import javax.swing.*;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Properties;

public class QuanLyNhapHang extends JPanel {
    
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 242, 242);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
    
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField searchField;
    private JFormattedTextField fromAmountField;
    private JFormattedTextField toAmountField;
    private JDatePickerImpl fromDatePicker;
    private JDatePickerImpl toDatePicker;
    private JComboBox<String> supplierCombo;
    private JComboBox<String> employeeCombo;
    
    public QuanLyNhapHang() {
        initComponents();
    }
    
    private void initComponents() {
        setLayout(new BorderLayout(0, 20));
        setBackground(Color.WHITE);
        setBorder(new EmptyBorder(30, 30, 30, 30));
        
        // Add main components
        add(createTopPanel(), BorderLayout.NORTH);
        add(createFilterPanel(), BorderLayout.WEST);
        add(createTablePanel(), BorderLayout.CENTER);
    }
    
    private JPanel createTopPanel() {
        JPanel topPanel = new JPanel(new BorderLayout(20, 0));
        topPanel.setBackground(Color.WHITE);
        
        // Left components with search
        JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
        leftPanel.setBackground(Color.WHITE);
        
        searchField = new JTextField();
        searchField.setPreferredSize(new Dimension(220, 35));
        searchField.setFont(CONTENT_FONT);
        
        JButton searchButton = createIconButton("/icon/search.png");
        
        leftPanel.add(searchField);
        leftPanel.add(searchButton);
        
        // Right components with action buttons
        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        rightPanel.setBackground(Color.WHITE);
        
        JButton addButton = createButton("Thêm phiếu nhập", "/icon/circle-plus.png", true);
        addButton.setBackground(PRIMARY_COLOR);
        addButton.setForeground(Color.WHITE);
        addButton.setPreferredSize(new Dimension(160, 38));
        
        JButton deleteButton = createButton("Xóa", "/icon/trash.png", true);
        JButton aboutButton = createButton("About", "/icon/info.png", true);
        JButton exportButton = createButton("Xuất Excel", "/icon/printer.png", true);
        exportButton.setPreferredSize(new Dimension(160, 38));
        
        rightPanel.add(addButton);
        rightPanel.add(deleteButton);
        rightPanel.add(aboutButton);
        rightPanel.add(exportButton);
        
        topPanel.add(leftPanel, BorderLayout.WEST);
        topPanel.add(rightPanel, BorderLayout.EAST);
        
        return topPanel;
    }
    
    private JPanel createFilterPanel() {
        JPanel filterPanel = new JPanel();
        filterPanel.setLayout(new BoxLayout(filterPanel, BoxLayout.Y_AXIS));
        filterPanel.setBackground(CONTENT_COLOR);
        filterPanel.setBorder(BorderFactory.createCompoundBorder(
            new EmptyBorder(0, 0, 0, 20),
            BorderFactory.createCompoundBorder(
                new LineBorder(PRIMARY_COLOR, 1, true),
                new EmptyBorder(15, 15, 15, 15)
            )
        ));
        filterPanel.setPreferredSize(new Dimension(300, 0));

        // Tiêu đề panel
        JLabel titleLabel = new JLabel("Lọc kết quả");
        titleLabel.setFont(new Font(FlatRobotoFont.FAMILY, Font.BOLD, 16));
        titleLabel.setForeground(PRIMARY_COLOR);
        titleLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        filterPanel.add(titleLabel);
        filterPanel.add(Box.createVerticalStrut(20));

        // Nhà cung cấp (ComboBox)
        supplierCombo = new JComboBox<>(new String[]{
            "Tất cả",
            "Xưởng may Đại Nam",
            "Xưởng may Hoàng Gia",
            "Công ty TNHH May Việt Tiến"
        });
        filterPanel.add(createFilterField("Nhà cung cấp", supplierCombo));
        filterPanel.add(Box.createVerticalStrut(15));

        // Nhân viên (ComboBox)
        employeeCombo = new JComboBox<>(new String[]{
            "Tất cả",
            "Nguyễn Thị Tường Vi",
            "Trần Văn Nam",
            "Lê Thị Hoa"
        });
        filterPanel.add(createFilterField("Nhân viên tiếp nhận", employeeCombo));
        filterPanel.add(Box.createVerticalStrut(15));

        // Từ ngày (DatePicker)
        fromDatePicker = createDatePicker();
        filterPanel.add(createFilterField("Từ ngày", fromDatePicker));
        filterPanel.add(Box.createVerticalStrut(15));

        // Đến ngày (DatePicker)
        toDatePicker = createDatePicker();
        filterPanel.add(createFilterField("Đến ngày", toDatePicker));
        filterPanel.add(Box.createVerticalStrut(15));

        // Khoảng tiền
        JPanel amountRangePanel = new JPanel();
        amountRangePanel.setLayout(new BoxLayout(amountRangePanel, BoxLayout.Y_AXIS));
        amountRangePanel.setBackground(CONTENT_COLOR);

        JLabel amountLabel = new JLabel("Khoảng tiền (VND)");
        amountLabel.setFont(CONTENT_FONT);
        amountLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JPanel amountFieldsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        amountFieldsPanel.setBackground(CONTENT_COLOR);

        fromAmountField = createFormattedTextField();
        toAmountField = createFormattedTextField();

        amountFieldsPanel.add(fromAmountField);
        JLabel toLabel = new JLabel("-");
        toLabel.setFont(CONTENT_FONT);
        amountFieldsPanel.add(toLabel);
        amountFieldsPanel.add(toAmountField);

        amountRangePanel.add(amountLabel);
        amountRangePanel.add(Box.createVerticalStrut(5));
        amountRangePanel.add(amountFieldsPanel);

        filterPanel.add(amountRangePanel);
        filterPanel.add(Box.createVerticalStrut(25));

        // Buttons panel
        JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        buttonsPanel.setBackground(CONTENT_COLOR);

        JButton filterButton = new JButton("Áp dụng");
        filterButton.setBackground(PRIMARY_COLOR);
        filterButton.setForeground(Color.WHITE);
        filterButton.setFont(CONTENT_FONT);
        filterButton.setPreferredSize(new Dimension(100, 35));
        filterButton.setBorder(new LineBorder(PRIMARY_COLOR, 1, true));
        filterButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                filterButton.setBackground(PRIMARY_COLOR.darker());
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                filterButton.setBackground(PRIMARY_COLOR);
            }
        });

        JButton resetButton = new JButton("Đặt lại");
        resetButton.setBackground(Color.WHITE);
        resetButton.setFont(CONTENT_FONT);
        resetButton.setPreferredSize(new Dimension(100, 35));
        resetButton.setBorder(new LineBorder(new Color(230, 230, 230), 1, true));
        resetButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                resetButton.setBackground(HOVER_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                resetButton.setBackground(Color.WHITE);
            }
        });
        resetButton.addActionListener(e -> resetFilters());

        buttonsPanel.add(filterButton);
        buttonsPanel.add(resetButton);

        filterPanel.add(buttonsPanel);

        return filterPanel;
    }
    
    private JPanel createTablePanel() {
        JPanel tablePanel = new JPanel(new BorderLayout());
        tablePanel.setBackground(Color.WHITE);
        
        // Create table model with columns
        String[] columns = {
            "Mã phiếu", "Nhà cung cấp", "Nhân viên nhập hàng", "Thời gian", "Tổng tiền"
        };
        
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table = new JTable(tableModel);
        table.setFont(CONTENT_FONT);
        table.setRowHeight(32);
        table.setGridColor(new Color(245, 245, 245));
        table.setSelectionBackground(HOVER_COLOR);
        table.setSelectionForeground(Color.BLACK);
        
        // Setup table header
        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(Color.WHITE);
        header.setForeground(Color.BLACK);
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
        header.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(230, 230, 230)));
        
        // Add sample data
        addSampleData();
        
        // Create scroll pane
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.getViewport().setBackground(Color.WHITE);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));
        
        tablePanel.add(scrollPane, BorderLayout.CENTER);
        
        return tablePanel;
    }
    
    private JButton createButton(String text, String iconPath, boolean isRounded) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        if (iconPath != null && !iconPath.isEmpty()) {
            button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
        }
        
        if (isRounded) {
            button.setBorder(new LineBorder(new Color(230, 230, 230), 1, true));
        } else {
            button.setBorder(BorderFactory.createEmptyBorder());
        }
        
        button.setFocusPainted(false);
        button.setBackground(Color.WHITE);
        button.setPreferredSize(new Dimension(130, 38));
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(HOVER_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                if (button.getForeground().equals(Color.WHITE)) {
                    button.setBackground(PRIMARY_COLOR);
                } else {
                    button.setBackground(Color.WHITE);
                }
            }
        });
        
        return button;
    }
    
    private JButton createIconButton(String iconPath) {
        JButton button = new JButton();
        button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
        button.setBorder(BorderFactory.createEmptyBorder());
        button.setFocusPainted(false);
        button.setBackground(Color.WHITE);
        button.setPreferredSize(new Dimension(38, 38));
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(HOVER_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(Color.WHITE);
            }
        });
        
        return button;
    }

    private JFormattedTextField createFormattedTextField() {
        NumberFormat format = NumberFormat.getIntegerInstance();
        format.setGroupingUsed(true);
        JFormattedTextField field = new JFormattedTextField(format);
        field.setPreferredSize(new Dimension(120, 35));
        field.setFont(CONTENT_FONT);
        return field;
    }

    private JPanel createFilterField(String label, JComponent component) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(CONTENT_COLOR);
        panel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel titleLabel = new JLabel(label);
        titleLabel.setFont(CONTENT_FONT);
        titleLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

        component.setAlignmentX(Component.LEFT_ALIGNMENT);
        if (component instanceof JComboBox) {
            component.setPreferredSize(new Dimension(280, 35));
            ((JComboBox<?>) component).setFont(CONTENT_FONT);
        }

        panel.add(titleLabel);
        panel.add(Box.createVerticalStrut(5));
        panel.add(component);

        return panel;
    }
    private JDatePickerImpl createDatePicker() {
        UtilDateModel model = new UtilDateModel();
        Properties p = new Properties();
        p.put("text.today", "Hôm nay");
        p.put("text.month", "Tháng");
        p.put("text.year", "Năm");
        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
        JDatePickerImpl datePicker = new JDatePickerImpl(datePanel, new DateLabelFormatter());
        datePicker.setPreferredSize(new Dimension(280, 35));
        datePicker.setFont(CONTENT_FONT);
        datePicker.getJFormattedTextField().setBackground(Color.WHITE);
        datePicker.getJFormattedTextField().setBorder(new LineBorder(new Color(230, 230, 230), 1));
        return datePicker;
    }

    private void addSampleData() {
        Object[][] data = {
            {"P01", "Xưởng may Đại Nam", "Nguyễn Thị Tường Vi", "01/11/2023", "15,000,000 VND"},
            {"P02", "Xưởng may Hoàng Gia", "Trần Văn Nam", "02/11/2023", "12,500,000 VND"},
            {"P03", "Công ty TNHH May Việt Tiến", "Lê Thị Hoa", "03/11/2023", "18,750,000 VND"},
            {"P04", "Xưởng may Đại Nam", "Nguyễn Thị Tường Vi", "05/11/2023", "22,000,000 VND"},
            {"P05", "Xưởng may Hoàng Gia", "Trần Văn Nam", "07/11/2023", "9,800,000 VND"},
            {"P06", "Công ty TNHH May Việt Tiến", "Lê Thị Hoa", "10/11/2023", "16,300,000 VND"}
        };
        
        for (Object[] row : data) {
            tableModel.addRow(row);
        }
    }

    private void resetFilters() {
        // Reset comboboxes
        supplierCombo.setSelectedIndex(0);
        employeeCombo.setSelectedIndex(0);
        
        // Reset date pickers
        fromDatePicker.getModel().setValue(null);
        toDatePicker.getModel().setValue(null);
        
        // Reset amount fields
        fromAmountField.setValue(null);
        toAmountField.setValue(null);
        
        // Reset search field
        searchField.setText("");
        
        // Refresh table (if needed)
        refreshTable();
    }
    
    private void refreshTable() {
        // Clear current table data
        tableModel.setRowCount(0);
        
        // Add sample data back (in real application, this would fetch from database)
        addSampleData();
    }

    // Custom formatter for date picker
    public class DateLabelFormatter extends AbstractFormatter {
        private final SimpleDateFormat dateFormatter = new SimpleDateFormat("dd/MM/yyyy");

        @Override
        public Object stringToValue(String text) throws ParseException {
            return dateFormatter.parse(text);
        }

        @Override
        public String valueToString(Object value) throws ParseException {
            if (value != null) {
                Calendar cal = (Calendar) value;
                return dateFormatter.format(cal.getTime());
            }
            return "";
        }
    }

    // Method to apply filters (to be implemented based on your needs)
    private void applyFilters() {
        // Get filter values
        String supplier = supplierCombo.getSelectedItem().toString();
        String employee = employeeCombo.getSelectedItem().toString();
        
        java.util.Date fromDate = (java.util.Date) fromDatePicker.getModel().getValue();
        java.util.Date toDate = (java.util.Date) toDatePicker.getModel().getValue();
        
        Number fromAmount = (Number) fromAmountField.getValue();
        Number toAmount = (Number) toAmountField.getValue();
        
        String searchText = searchField.getText().trim();

        // Clear current table data
        tableModel.setRowCount(0);

        // In a real application, you would:
        // 1. Build a query based on these filters
        // 2. Execute the query against your database
        // 3. Update the table with the filtered results
        
        // For now, just reload sample data
        addSampleData();
    }


}