package gui;

import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.*;
import javax.swing.table.*;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;

public class Form_NhanVien extends JPanel {
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 192, 203);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);

    private int selectedRow = -1;
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField searchField;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

    // Custom ComboBox class
    private class CustomComboBox extends JComboBox<String> {
        public CustomComboBox(String[] items) {
            super(items);
            setFont(CONTENT_FONT);
            setBackground(Color.WHITE);
            setBorder(BorderFactory.createCompoundBorder(
                new LineBorder(new Color(230, 230, 230), 1),
                BorderFactory.createEmptyBorder(5, 10, 5, 10)
            ));
            setUI(new CustomComboBoxUI());
            
            setRenderer(new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(JList<?> list, Object value,
                        int index, boolean isSelected, boolean cellHasFocus) {
                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
                    setFont(CONTENT_FONT);
                    
                    if (isSelected) {
                        setBackground(HOVER_COLOR);
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(Color.WHITE);
                        setForeground(Color.BLACK);
                    }
                    return this;
                }
            });
        }
    }

    public Form_NhanVien() {
        initComponents();
    }

    private void initComponents() {
        setLayout(new BorderLayout(0, 20));
        setBackground(Color.WHITE);
        setBorder(new EmptyBorder(30, 30, 30, 30));

        add(createTopPanel(), BorderLayout.NORTH);
        add(createTablePanel(), BorderLayout.CENTER);
    }

    private JPanel createTopPanel() {
        JPanel topPanel = new JPanel(new BorderLayout(20, 0));
        topPanel.setBackground(Color.WHITE);
        topPanel.setBorder(new EmptyBorder(0, 0, 20, 0));

        // Left panel with search components
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
        searchPanel.setBackground(Color.WHITE);

        String[] filterItems = {"Tất cả", "Nam", "Nữ"};
        CustomComboBox filterCombo = new CustomComboBox(filterItems);
        filterCombo.setPreferredSize(new Dimension(150, 35));
        
        searchField = new JTextField();
        searchField.setPreferredSize(new Dimension(220, 35));
        searchField.setFont(CONTENT_FONT);
        searchField.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));

        JButton searchButton = createRoundedButton("", "/icon/search.png", false);
        
        // Add search functionality
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                performSearch(searchField.getText());
            }
        });

        searchPanel.add(filterCombo);
        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        // Right panel with action buttons
        JPanel actionsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        actionsPanel.setBackground(Color.WHITE);

        JButton addButton = createRoundedButton("Thêm nhân viên", "/icon/circle-plus.png", true);
        addButton.setBackground(PRIMARY_COLOR);
        addButton.setForeground(Color.WHITE);
        addButton.setPreferredSize(new Dimension(160, 38));

        JButton editButton = createRoundedButton("Edit", "/icon/pencil.png", true);
        JButton deleteButton = createRoundedButton("Xóa", "/icon/trash.png", true);
        JButton aboutButton = createRoundedButton("About", "/icon/info.png", true);
        JButton exportButton = createRoundedButton("Xuất Excel", "/icon/printer.png", true);
        exportButton.setPreferredSize(new Dimension(160, 38));

        // Add action listeners
        addButton.addActionListener(e -> showAddDialog());
        editButton.addActionListener(e -> showEditDialog());
        deleteButton.addActionListener(e -> deleteEmployee());
        aboutButton.addActionListener(e -> showAboutDialog());
        exportButton.addActionListener(e -> exportToExcel());

        actionsPanel.add(addButton);
        actionsPanel.add(editButton);
        actionsPanel.add(deleteButton);
        actionsPanel.add(aboutButton);
        actionsPanel.add(exportButton);

        topPanel.add(searchPanel, BorderLayout.WEST);
        topPanel.add(actionsPanel, BorderLayout.EAST);

        return topPanel;
    }

    private JPanel createTablePanel() {
        JPanel tablePanel = new JPanel(new BorderLayout(0, 15));
        tablePanel.setBackground(Color.WHITE);

        String[] columns = {"Mã NV", "Họ và tên", "Giới tính", "Ngày sinh", "SDT", "Email"};
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        table = new JTable(tableModel);
        table.setFont(CONTENT_FONT);
        table.setRowHeight(40);
        table.setGridColor(new Color(245, 245, 245));
        table.setSelectionBackground(HOVER_COLOR);
        table.setSelectionForeground(Color.BLACK);
        table.setShowVerticalLines(true);
        table.setShowHorizontalLines(true);

        // Căn giữa và điều chỉnh độ rộng cột
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        
        for (int i = 0; i < table.getColumnCount(); i++) {
            TableColumn column = table.getColumnModel().getColumn(i);
            if (i == 0 || i == 2 || i == 4) { // Mã NV, Giới tính, SDT
                column.setCellRenderer(centerRenderer);
            }
            
            switch (i) {
                case 0: // Mã NV
                    column.setPreferredWidth(80);
                    break;
                case 1: // Họ tên
                    column.setPreferredWidth(200);
                    break;
                case 2: // Giới tính
                    column.setPreferredWidth(80);
                    break;
                case 3: // Ngày sinh
                    column.setPreferredWidth(100);
                    break;
                case 4: // SDT
                    column.setPreferredWidth(100);
                    break;
                case 5: // Email
                    column.setPreferredWidth(200);
                    break;
            }
        }

        // Header styling
        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(Color.WHITE);
        header.setForeground(Color.BLACK);
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
        ((DefaultTableCellRenderer)header.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        // Add selection listener
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                selectedRow = table.getSelectedRow();
            }
        });

        // Scroll pane
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));
        scrollPane.getVerticalScrollBar().setUI(new CustomScrollBarUI());

        // Add sample data
        addSampleData();

        tablePanel.add(scrollPane, BorderLayout.CENTER);
        return tablePanel;
    }

    private void showAddDialog() {
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Thêm nhân viên", true);
        dialog.setLayout(new BorderLayout());
        dialog.setSize(500, 500);
        dialog.setLocationRelativeTo(null);

        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        formPanel.setBackground(Color.WHITE);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // Form fields
        JTextField nameField = createFormField("Họ và tên:", formPanel, gbc, 0);
        
        // Gender combo box
        JPanel genderPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        genderPanel.setBackground(Color.WHITE);
        JLabel genderLabel = new JLabel("Giới tính:");
        genderLabel.setFont(CONTENT_FONT);
        String[] genders = {"Nam", "Nữ"};
        JComboBox<String> genderCombo = new CustomComboBox(genders);
        genderCombo.setPreferredSize(new Dimension(200, 35));
        genderPanel.add(genderLabel);
        genderPanel.add(Box.createHorizontalStrut(63));
        genderPanel.add(genderCombo);
        
        gbc.gridy = 1;
        gbc.gridx = 0;
        gbc.gridwidth = 2;
        formPanel.add(genderPanel, gbc);

        // Date chooser
        JPanel datePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        datePanel.setBackground(Color.WHITE);
        JLabel dateLabel = new JLabel("Ngày sinh:");
        dateLabel.setFont(CONTENT_FONT);
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setPreferredSize(new Dimension(200, 35));
        dateChooser.setFont(CONTENT_FONT);
        dateChooser.setDateFormatString("yyyy-MM-dd");
        datePanel.add(dateLabel);
        datePanel.add(Box.createHorizontalStrut(60));
        datePanel.add(dateChooser);
        
        gbc.gridy = 2;
        formPanel.add(datePanel, gbc);

        JTextField phoneField = createFormField("Số điện thoại:", formPanel, gbc, 3);
        JTextField emailField = createFormField("Email:", formPanel, gbc, 4);

        // Buttons panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.WHITE);

        JButton saveButton = createFormButton("Lưu", true);
        saveButton.addActionListener(e -> {
            if (validateFields(nameField.getText(), phoneField.getText(), emailField.getText())) {
                Object[] rowData = {
                    "NV" + String.format("%03d", tableModel.getRowCount() + 1),
                    nameField.getText(),
                    genderCombo.getSelectedItem(),
                    dateFormat.format(dateChooser.getDate()),
                    phoneField.getText(),
                    emailField.getText()
                };
                tableModel.addRow(rowData);
                dialog.dispose();
            }
        });

        JButton cancelButton = createFormButton("Hủy", false);
        cancelButton.addActionListener(e -> dialog.dispose());

        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);

        dialog.add(formPanel, BorderLayout.CENTER);
        dialog.add(buttonPanel, BorderLayout.SOUTH);
        dialog.setVisible(true);
    }

    private void showEditDialog() {
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một nhân viên để chỉnh sửa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Chỉnh sửa nhân viên", true);
        dialog.setLayout(new BorderLayout());
        dialog.setSize(500, 500);
        dialog.setLocationRelativeTo(null);

        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        formPanel.setBackground(Color.WHITE);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // Form fields with current data
        JTextField nameField = createFormField("Họ và tên:", formPanel, gbc, 0);
        nameField.setText((String) table.getValueAt(selectedRow, 1));

        // Gender combo box
        JPanel genderPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        genderPanel.setBackground(Color.WHITE);
        JLabel genderLabel = new JLabel("Giới tính:");
        genderLabel.setFont(CONTENT_FONT);
        String[] genders = {"Nam", "Nữ"};
        JComboBox<String> genderCombo = new CustomComboBox(genders);
        genderCombo.setSelectedItem(table.getValueAt(selectedRow, 2));
        genderCombo.setPreferredSize(new Dimension(200, 35));
        genderPanel.add(genderLabel);
        genderPanel.add(Box.createHorizontalStrut(63));
        genderPanel.add(genderCombo);
        
        gbc.gridy = 1;
        gbc.gridy = 1;
        gbc.gridx = 0;
        gbc.gridwidth = 2;
        formPanel.add(genderPanel, gbc);

        // Date chooser with current date
        JPanel datePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        datePanel.setBackground(Color.WHITE);
        JLabel dateLabel = new JLabel("Ngày sinh:");
        dateLabel.setFont(CONTENT_FONT);
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setPreferredSize(new Dimension(200, 35));
        dateChooser.setFont(CONTENT_FONT);
        dateChooser.setDateFormatString("yyyy-MM-dd");
        try {
            Date date = dateFormat.parse((String) table.getValueAt(selectedRow, 3));
            dateChooser.setDate(date);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        datePanel.add(dateLabel);
        datePanel.add(Box.createHorizontalStrut(60));
        datePanel.add(dateChooser);
        
        gbc.gridy = 2;
        formPanel.add(datePanel, gbc);

        JTextField phoneField = createFormField("Số điện thoại:", formPanel, gbc, 3);
        phoneField.setText((String) table.getValueAt(selectedRow, 4));
        
        JTextField emailField = createFormField("Email:", formPanel, gbc, 4);
        emailField.setText((String) table.getValueAt(selectedRow, 5));

        // Buttons panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.WHITE);

        JButton saveButton = createFormButton("Lưu", true);
        saveButton.addActionListener(e -> {
            if (validateFields(nameField.getText(), phoneField.getText(), emailField.getText())) {
                table.setValueAt(nameField.getText(), selectedRow, 1);
                table.setValueAt(genderCombo.getSelectedItem(), selectedRow, 2);
                table.setValueAt(dateFormat.format(dateChooser.getDate()), selectedRow, 3);
                table.setValueAt(phoneField.getText(), selectedRow, 4);
                table.setValueAt(emailField.getText(), selectedRow, 5);
                dialog.dispose();
            }
        });

        JButton cancelButton = createFormButton("Hủy", false);
        cancelButton.addActionListener(e -> dialog.dispose());

        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);

        dialog.add(formPanel, BorderLayout.CENTER);
        dialog.add(buttonPanel, BorderLayout.SOUTH);
        dialog.setVisible(true);
    }

    private void deleteEmployee() {
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một nhân viên để xóa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc chắn muốn xóa nhân viên này?",
            "Xác nhận xóa",
            JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            tableModel.removeRow(selectedRow);
            selectedRow = -1;
        }
    }

    private void showAboutDialog() {
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Thông tin", true);
        dialog.setLayout(new BorderLayout());
        dialog.setSize(400, 300);
        dialog.setLocationRelativeTo(null);

        JPanel contentPanel = new JPanel();
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        contentPanel.setBackground(Color.WHITE);
        contentPanel.setBorder(new EmptyBorder(20, 20, 20, 20));

        JLabel titleLabel = new JLabel("Quản lý nhân viên v1.0");
        titleLabel.setFont(new Font(FlatRobotoFont.FAMILY, Font.BOLD, 18));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel descLabel = new JLabel("Phần mềm quản lý nhân viên");
        descLabel.setFont(CONTENT_FONT);
        descLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel authorLabel = new JLabel("Developed by Your Name");
        authorLabel.setFont(CONTENT_FONT);
        authorLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        contentPanel.add(Box.createVerticalGlue());
        contentPanel.add(titleLabel);
        contentPanel.add(Box.createVerticalStrut(10));
        contentPanel.add(descLabel);
        contentPanel.add(Box.createVerticalStrut(5));
        contentPanel.add(authorLabel);
        contentPanel.add(Box.createVerticalGlue());

        JButton closeButton = createFormButton("Đóng", false);
        closeButton.addActionListener(e -> dialog.dispose());

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.setBackground(Color.WHITE);
        buttonPanel.add(closeButton);

        dialog.add(contentPanel, BorderLayout.CENTER);
        dialog.add(buttonPanel, BorderLayout.SOUTH);
        dialog.setVisible(true);
    }

    private void exportToExcel() {
        // TODO: Implement Excel export functionality
        JOptionPane.showMessageDialog(this,
            "Chức năng xuất Excel đang được phát triển",
            "Thông báo",
            JOptionPane.INFORMATION_MESSAGE);
    }

    private JTextField createFormField(String labelText, JPanel panel, GridBagConstraints gbc, int row) {
        JPanel fieldPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        fieldPanel.setBackground(Color.WHITE);
        
        JLabel label = new JLabel(labelText);
        label.setFont(CONTENT_FONT);
        
        JTextField textField = new JTextField();
        textField.setPreferredSize(new Dimension(200, 35));
        textField.setFont(CONTENT_FONT);
        textField.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        fieldPanel.add(label);
        fieldPanel.add(Box.createHorizontalStrut(labelText.equals("Email:") ? 87 : 
                      labelText.equals("Số điện thoại:") ? 45 : 65));
        fieldPanel.add(textField);
        
        gbc.gridy = row;
        gbc.gridx = 0;
        gbc.gridwidth = 2;
        panel.add(fieldPanel, gbc);
        
        return textField;
    }

    private JButton createFormButton(String text, boolean isPrimary) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setPreferredSize(new Dimension(100, 35));
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        
        if (isPrimary) {
            button.setBackground(PRIMARY_COLOR);
            button.setForeground(Color.WHITE);
        } else {
            button.setBackground(Color.WHITE);
            button.setForeground(Color.BLACK);
            button.setBorder(new LineBorder(new Color(230, 230, 230), 1));
        }
        
        return button;
    }

    private boolean validateFields(String name, String phone, String email) {
        if (name.trim().isEmpty()) {
            showError("Vui lòng nhập họ và tên");
            return false;
        }
        
        if (!phone.matches("\\d{10}")) {
            showError("Số điện thoại không hợp lệ");
            return false;
        }
        
        if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            showError("Email không hợp lệ");
            return false;
        }
        
        return true;
    }

    private void showError(String message) {
        JOptionPane.showMessageDialog(this,
            message,
            "Lỗi",
            JOptionPane.ERROR_MESSAGE);
    }

    private void performSearch(String searchText) {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
        table.setRowSorter(sorter);
        
        if (searchText.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
        }
    }

    private void addSampleData() {
        Object[][] sampleData = {
            {"NV001", "Nguyễn Văn A", "Nam", "1990-01-01", "0123456789", "nguyenvana@email.com"},
            {"NV002", "Trần Thị B", "Nữ", "1992-03-15", "0987654321", "tranthib@email.com"},
            {"NV003", "Lê Văn C", "Nam", "1988-07-20", "0369852147", "levanc@email.com"}
        };
        
        for (Object[] row : sampleData) {
            tableModel.addRow(row);
        }
    }
}