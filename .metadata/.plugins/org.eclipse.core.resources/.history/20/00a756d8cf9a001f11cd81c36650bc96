package dialog;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.*;
import java.io.File;

public class ThemSanPham extends JDialog {
    private JTextField txtTenSP, txtDanhMuc, txtTonKho, txtGiaBan, txtGiaNhap, txtThuongHieu;
    private JTextArea txtMoTa;
    private JLabel lblImage;
    private String imagePath = "";
    private boolean isConfirmed = false;

    public ThemSanPham(Frame owner) {
        super(owner, "Thêm Sản Phẩm Mới", true);
        initComponents();
    }

    private void initComponents() {
        setLayout(new BorderLayout());
        setBackground(Color.WHITE);
        
        // Main Panel
        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBackground(Color.WHITE);
        mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));

        // Title
        JLabel titleLabel = new JLabel("THÊM SẢN PHẨM MỚI");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 18));
        titleLabel.setForeground(new Color(219, 39, 119));
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        
        // Content Panel
        JPanel contentPanel = new JPanel(new GridBagLayout());
        contentPanel.setBackground(Color.WHITE);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // Image Panel (Left side)
        JPanel imagePanel = new JPanel(new BorderLayout());
        imagePanel.setBackground(Color.WHITE);
        imagePanel.setBorder(new TitledBorder("Tải ảnh lên"));
        
        lblImage = new JLabel();
        lblImage.setPreferredSize(new Dimension(200, 200));
        lblImage.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        lblImage.setHorizontalAlignment(SwingConstants.CENTER);
        
        JButton btnChooseImage = new JButton("Chọn ảnh");
        btnChooseImage.addActionListener(e -> chooseImage());
        
        imagePanel.add(lblImage, BorderLayout.CENTER);
        imagePanel.add(btnChooseImage, BorderLayout.SOUTH);

        // Form Panel (Right side)
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBackground(Color.WHITE);

        // Initialize components
        txtTenSP = createStyledTextField();
        txtDanhMuc = createStyledTextField();
        txtTonKho = createStyledTextField();
        txtGiaBan = createStyledTextField();
        txtGiaNhap = createStyledTextField();
        txtThuongHieu = createStyledTextField();
        txtMoTa = new JTextArea(4, 20);
        txtMoTa.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        txtMoTa.setLineWrap(true);
        txtMoTa.setWrapStyleWord(true);

        // Add components to form panel
        addFormRow(formPanel, "Tên sản phẩm:", txtTenSP, 0);
        addFormRow(formPanel, "Danh mục:", txtDanhMuc, 1);
        addFormRow(formPanel, "Tồn kho:", txtTonKho, 2);
        addFormRow(formPanel, "Giá bán:", txtGiaBan, 3);
        addFormRow(formPanel, "Giá nhập:", txtGiaNhap, 4);
        addFormRow(formPanel, "Thương hiệu:", txtThuongHieu, 5);
        addFormRow(formPanel, "Mô tả:", new JScrollPane(txtMoTa), 6);

        // Button Panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonPanel.setBackground(Color.WHITE);

        JButton btnSave = createStyledButton("Sửa phân loại", new Color(219, 39, 119));
        JButton btnCancel = createStyledButton("Hủy bỏ", new Color(255, 182, 193));
        
        btnSave.addActionListener(e -> {
            isConfirmed = true;
            dispose();
        });
        btnCancel.addActionListener(e -> dispose());

        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);

        // Layout assembly
        setLayout(new BorderLayout());
        add(titleLabel, BorderLayout.NORTH);

        JPanel centerPanel = new JPanel(new GridBagLayout());
        centerPanel.setBackground(Color.WHITE);
        
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.3;
        gbc.weighty = 1;
        gbc.fill = GridBagConstraints.BOTH;
        centerPanel.add(imagePanel, gbc);

        gbc.gridx = 1;
        gbc.weightx = 0.7;
        centerPanel.add(formPanel, gbc);

        add(centerPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        // Final dialog setup
        setSize(800, 600);
        setLocationRelativeTo(getOwner());
    }

    private JTextField createStyledTextField() {
        JTextField textField = new JTextField(20);
        textField.setPreferredSize(new Dimension(200, 30));
        textField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(Color.LIGHT_GRAY),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        return textField;
    }

    private JButton createStyledButton(String text, Color bgColor) {
        JButton button = new JButton(text);
        button.setPreferredSize(new Dimension(120, 40));
        button.setBackground(bgColor);
        button.setForeground(Color.WHITE);
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        return button;
    }

    private void addFormRow(JPanel panel, String labelText, JComponent component, int row) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = row;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);

        JLabel label = new JLabel(labelText);
        panel.add(label, gbc);

        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        panel.add(component, gbc);
    }

    private void chooseImage() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Image files", "jpg", "jpeg", "png", "gif");
        fileChooser.setFileFilter(filter);

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            imagePath = file.getAbsolutePath();
            
            // Display image preview
            try {
                ImageIcon imageIcon = new ImageIcon(imagePath);
                Image image = imageIcon.getImage().getScaledInstance(
                    200, 200, Image.SCALE_SMOOTH);
                lblImage.setIcon(new ImageIcon(image));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, 
                    "Error loading image: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public boolean isConfirmed() {
        return isConfirmed;
    }

    public String getImagePath() {
        return imagePath;
    }

    // Getters for form data
    public String getTenSP() { return txtTenSP.getText(); }
    public String getDanhMuc() { return txtDanhMuc.getText(); }
    public String getTonKho() { return txtTonKho.getText(); }
    public String getGiaBan() { return txtGiaBan.getText(); }
    public String getGiaNhap() { return txtGiaNhap.getText(); }
    public String getThuongHieu() { return txtThuongHieu.getText(); }
    public String getMoTa() { return txtMoTa.getText(); }
}