package gui;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.text.NumberFormat;

public class ThemDonNhap extends JPanel {
    // Constants
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 242, 242);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
    private static final Font TITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 16);

    // Components
    private JPanel leftPanel;
    private JPanel rightPanel;
    private JTable tonKhoTable;
    private DefaultTableModel tonKhoModel;
    private JTable donNhapTable;
    private DefaultTableModel donNhapModel;
    private JTextField maSPField, tenSPField, thuongHieuField;
    private JTextField giaNhapField, mauSacField, kichCoField, soLuongField;
    private JLabel tongTienLabel;
    private double tongTien = 0;

    public ThemDonNhap() {
        initializeComponents();
        setupLayout();
    }

    private void initializeComponents() {
        // Initialize left panel components - Tồn kho table
        String[] tonKhoColumns = {"Mã SP", "Tên sản phẩm", "Số lượng tồn"};
        tonKhoModel = new DefaultTableModel(tonKhoColumns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tonKhoTable = new JTable(tonKhoModel);
        setupTable(tonKhoTable);

        // Initialize right panel components - Form nhập + table đơn hàng
        String[] donNhapColumns = {"Mã SP", "Tên sản phẩm", "Màu sắc", "Kích cỡ", "Thương hiệu", "Đơn giá", "Số lượng"};
        donNhapModel = new DefaultTableModel(donNhapColumns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        donNhapTable = new JTable(donNhapModel);
        setupTable(donNhapTable);

        // Initialize input fields
        maSPField = createStyledTextField();
        tenSPField = createStyledTextField();
        thuongHieuField = createStyledTextField();
        giaNhapField = createStyledTextField();
        mauSacField = createStyledTextField();
        kichCoField = createStyledTextField();
        soLuongField = createStyledTextField();

        tongTienLabel = new JLabel("TỔNG TIỀN: 0 đ");
        tongTienLabel.setFont(TITLE_FONT);
        tongTienLabel.setForeground(PRIMARY_COLOR);
    }

    private void setupLayout() {
        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(20, 20, 20, 20));
        setBackground(Color.WHITE);

        // Left Panel - Tồn kho
        leftPanel = new JPanel(new BorderLayout(0, 10));
        leftPanel.setBackground(Color.WHITE);
        leftPanel.setBorder(new EmptyBorder(0, 0, 0, 10));
        setupLeftPanel();

        // Right Panel - Form nhập + table đơn hàng
        rightPanel = new JPanel(new BorderLayout(0, 10));
        rightPanel.setBackground(Color.WHITE);
        rightPanel.setBorder(new EmptyBorder(0, 10, 0, 0));
        setupRightPanel();

        // Add panels to main panel
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftPanel, rightPanel);
        splitPane.setResizeWeight(0.4);
        splitPane.setDividerSize(1);
        splitPane.setBorder(null);
        add(splitPane, BorderLayout.CENTER);

        // Load sample data
        loadSampleData();
    }

    private void setupLeftPanel() {
        // Header
        JLabel headerLabel = new JLabel("Sản phẩm tồn kho");
        headerLabel.setFont(TITLE_FONT);
        leftPanel.add(headerLabel, BorderLayout.NORTH);

        // Table
        JScrollPane scrollPane = new JScrollPane(tonKhoTable);
        styleScrollPane(scrollPane);
        leftPanel.add(scrollPane, BorderLayout.CENTER);
    }

    private void setupRightPanel() {
        // Top - Input form
        JPanel inputPanel = new JPanel(new GridBagLayout());
        inputPanel.setBackground(CONTENT_COLOR);
        inputPanel.setBorder(new EmptyBorder(15, 15, 15, 15));
        setupInputPanel(inputPanel);
        rightPanel.add(inputPanel, BorderLayout.NORTH);

        // Center - Table
        JScrollPane scrollPane = new JScrollPane(donNhapTable);
        styleScrollPane(scrollPane);
        rightPanel.add(scrollPane, BorderLayout.CENTER);

        // Bottom - Total and Button
        JPanel bottomPanel = new JPanel(new BorderLayout());
        bottomPanel.setBackground(Color.WHITE);
        bottomPanel.setBorder(new EmptyBorder(10, 0, 0, 0));

        // Total
        bottomPanel.add(tongTienLabel, BorderLayout.WEST);

        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        buttonPanel.setBackground(Color.WHITE);
        JButton nhapHangButton = createStyledButton("NHẬP HÀNG", true);
        buttonPanel.add(nhapHangButton);
        bottomPanel.add(buttonPanel, BorderLayout.EAST);

        rightPanel.add(bottomPanel, BorderLayout.SOUTH);
    }

    private void setupInputPanel(JPanel panel) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Row 1
        addFormField(panel, "Mã SP:", maSPField, gbc, 0, 0);
        addFormField(panel, "Tên sản phẩm:", tenSPField, gbc, 0, 2);
        addFormField(panel, "Thương hiệu:", thuongHieuField, gbc, 0, 4);

        // Row 2
        addFormField(panel, "Giá nhập:", giaNhapField, gbc, 1, 0);
        addFormField(panel, "Màu sắc:", mauSacField, gbc, 1, 2);
        addFormField(panel, "Kích cỡ:", kichCoField, gbc, 1, 4);

        // Row 3
        addFormField(panel, "Số lượng:", soLuongField, gbc, 2, 0);
        
        // Add button
        JButton addButton = createStyledButton("Thêm SP vào đơn", true);
        gbc.gridx = 4;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.EAST;
        panel.add(addButton, gbc);
    }

    private void addFormField(JPanel panel, String labelText, JTextField field, 
                            GridBagConstraints gbc, int row, int col) {
        gbc.gridx = col;
        gbc.gridy = row;
        gbc.gridwidth = 1;
        JLabel label = new JLabel(labelText);
        label.setFont(CONTENT_FONT);
        panel.add(label, gbc);

        gbc.gridx = col + 1;
        gbc.weightx = 1.0;
        panel.add(field, gbc);
        gbc.weightx = 0.0;
    }

    private JTextField createStyledTextField() {
        JTextField field = new JTextField();
        field.setFont(CONTENT_FONT);
        field.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            new EmptyBorder(5, 8, 5, 8)
        ));
        
        field.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                field.setBorder(BorderFactory.createCompoundBorder(
                    new LineBorder(PRIMARY_COLOR, 1),
                    new EmptyBorder(5, 8, 5, 8)
                ));
            }

            @Override
            public void focusLost(FocusEvent e) {
                field.setBorder(BorderFactory.createCompoundBorder(
                    new LineBorder(new Color(230, 230, 230), 1),
                    new EmptyBorder(5, 8, 5, 8)
                ));
            }
        });

        return field;
    }

    private JButton createStyledButton(String text, boolean isPrimary) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setFocusPainted(false);

        if (isPrimary) {
            button.setBackground(PRIMARY_COLOR);
            button.setForeground(Color.WHITE);
            button.setBorder(new LineBorder(PRIMARY_COLOR));
        } else {
            button.setBackground(Color.WHITE);
            button.setForeground(Color.BLACK);
            button.setBorder(new LineBorder(new Color(230, 230, 230)));
        }

        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (isPrimary) {
                    button.setBackground(PRIMARY_COLOR.darker());
                } else {
                    button.setBackground(HOVER_COLOR);
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (isPrimary) {
                    button.setBackground(PRIMARY_COLOR);
                } else {
                    button.setBackground(Color.WHITE);
                }
            }
        });

        return button;
    }

    private void setupTable(JTable table) {
        table.setFont(CONTENT_FONT);
        table.setRowHeight(40);
        table.setGridColor(new Color(230, 230, 230));
        table.getTableHeader().setFont(HEADER_FONT);
        table.getTableHeader().setBackground(Color.WHITE);
        table.getTableHeader().setPreferredSize(new Dimension(0, 40));
        table.setSelectionBackground(HOVER_COLOR);
        table.setSelectionForeground(Color.BLACK);
    }

    private void styleScrollPane(JScrollPane scrollPane) {
        scrollPane.setBorder(new LineBorder(new Color(230, 230, 230)));
        scrollPane.getViewport().setBackground(Color.WHITE);

        // Style the scrollbars
        scrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = PRIMARY_COLOR;
                this.trackColor = new Color(245, 245, 245);
            }

            @Override
            protected JButton createDecreaseButton(int orientation) {
                return createZeroButton();
            }

            @Override
            protected JButton createIncreaseButton(int orientation) {
                return createZeroButton();
            }
        });
    }

    private JButton createZeroButton() {
        JButton button = new JButton();
        button.setPreferredSize(new Dimension(0, 0));
        button.setMinimumSize(new Dimension(0, 0));
        button.setMaximumSize(new Dimension(0, 0));
        return button;
    }

    private void loadSampleData() {
        // Load sample data for tồn kho table
        Object[][] tonKhoData = {
            {"SP01", "Váy kẻ caro cúc", "30"},
            {"SP02", "Áo sơ mi trắng", "25"},
            {"SP03", "Quần jean nữ", "40"}
        };

        for (Object[] row : tonKhoData) {
            tonKhoModel.addRow(row);
        }

        // Load sample data for đơn nhập table
        Object[][] donNhapData = {
            {"SP001", "Váy ngắn kẻ caro", "Hồng nhạt", "L", "Brand A", "250,000", "3"},
            {"SP002", "Áo sơ mi dài tay", "Trắng", "M", "Brand B", "180,000", "5"}
        };

        for (Object[] row : donNhapData) {
            donNhapModel.addRow(row);
        }

        updateTongTien();
    }

    private void updateTongTien() {
        tongTien = 0;
        for (int i = 0; i < donNhapModel.getRowCount(); i++) {
            String donGiaStr = donNhapModel.getValueAt(i, 5).toString().replace(",", "");
            int soLuong = Integer.parseInt(donNhapModel.getValueAt(i, 6).toString());
            tongTien += Double.parseDouble(donGiaStr) * soLuong;
        }

        NumberFormat formatter = NumberFormat.getNumberInstance();
        tongTienLabel.setText("TỔNG TIỀN: " + formatter.format(tongTien) + " đ");
    }
}