package dao;

import entity.User;
import service.EmailService;
import service.PasswordGenerator;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import connection.MyConnection;

public class DangNhap_Dao {
	private MyConnection myConnection;

	public DangNhap_Dao() {
		myConnection = new MyConnection();
	}

	public User kiemTraDangNhap(String username, String password) {
		// Query không kiểm tra password vì có thể password trong DB đã bị mã hóa khác
		String sql = "SELECT * FROM user WHERE username = ?";

		try (Connection conn = myConnection.connect(); PreparedStatement pst = conn.prepareStatement(sql)) {

			pst.setString(1, username);
			ResultSet rs = pst.executeQuery();

			if (rs.next()) {
				// Lấy password từ DB ra để so sánh trực tiếp
				String dbPassword = rs.getString("password");

				// Nếu password khớp
				if (dbPassword.equals(password)) {
					User user = new User();
					user.setUserID(rs.getString("userID"));
					user.setUsername(rs.getString("username"));
					user.setFullName(rs.getString("fullName"));
					user.setGender(rs.getString("gender"));
					user.setBirthDate(rs.getDate("birthDate"));
					user.setPhone(rs.getString("phone"));
					user.setEmail(rs.getString("email"));
					user.setRole(rs.getString("role"));
					user.setStatus(rs.getString("status"));

					// Kiểm tra status
					if (!"active".equals(user.getStatus())) {
						return null; // Tài khoản không active
					}

					return user;
				}
			}
			return null;

		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		} finally {
			myConnection.closeConnection();
		}
	}

	public String layLaiMatKhau(String username, String email, String phone) {
		String sql = "SELECT * FROM user WHERE username = ? AND email = ? AND phone = ? AND status = 'active'";

		try (Connection conn = myConnection.connect(); PreparedStatement pst = conn.prepareStatement(sql)) {

			pst.setString(1, username);
			pst.setString(2, email);
			pst.setString(3, phone);

			ResultSet rs = pst.executeQuery();

			if (rs.next()) {
				// Tạo mật khẩu mới có độ bảo mật cao
				String newPassword = PasswordGenerator.generateRandomPassword();

				// Tạo thêm một mật khẩu dễ nhớ (tùy chọn)
				String memorablePassword = PasswordGenerator.generateMemorablePassword();

				// Mã hóa mật khẩu mới
				String hashedPassword = hashPassword(newPassword);

				// Gửi email với cả hai loại mật khẩu
				String emailContent = String.format(
						"Mật khẩu mới của bạn là: %s\n\n" + "Hoặc bạn có thể sử dụng mật khẩu dễ nhớ: %s", newPassword,
						memorablePassword);

				// Gửi email
				boolean emailSent = EmailService.sendPasswordResetEmail(email, username, emailContent);

				if (!emailSent) {
					throw new SQLException("Không thể gửi email");
				}

				// Cập nhật mật khẩu mới vào DB
				String updateSql = "UPDATE user SET password = ? WHERE username = ?";
				try (PreparedStatement updatePst = conn.prepareStatement(updateSql)) {
					updatePst.setString(1, hashedPassword);
					updatePst.setString(2, username);
					updatePst.executeUpdate();

					// Ghi log với thêm thông tin về độ mạnh của mật khẩu
					ghiLogDoiMatKhau(username, "EMAIL",
							PasswordGenerator.isStrongPassword(newPassword) ? "STRONG" : "MODERATE");

					return newPassword;
				}
			}
			return null;

		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	private void ghiLogDoiMatKhau(String username, String method, String passwordStrength) {
		String sql = "INSERT INTO password_reset_log "
				+ "(username, reset_time, status, reset_method, password_strength) "
				+ "VALUES (?, NOW(), 'SUCCESS', ?, ?)";
		try (Connection conn = myConnection.connect(); PreparedStatement pst = conn.prepareStatement(sql)) {

			pst.setString(1, username);
			pst.setString(2, method);
			pst.setString(3, passwordStrength);
			pst.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}