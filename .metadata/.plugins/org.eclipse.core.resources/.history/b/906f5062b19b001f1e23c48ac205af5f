package gui;

import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.*;
import javax.swing.table.*;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;

import dialog.SuaNhanVienDialog;
import dialog.ThemNhanVienDialog;

public class Form_NhanVien extends JPanel {
	   private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
	    private static final Color CONTENT_COLOR = new Color(255, 192, 203);
	    private static final Color HOVER_COLOR = new Color(252, 231, 243);
	    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
	    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
	    private static final Font TAB_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 14);
	    private int selectedRow = -1;
	    private JTable table;
	    private DefaultTableModel tableModel;
	    private JTextField searchField;
	    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	    private JTabbedPane tabbedPane;

	    public Form_NhanVien() {
	        setLayout(new BorderLayout());
	        initComponents();
	    }

	    private void initComponents() {
	        // Tạo TabbedPane và set background cho toàn bộ panel
	        setBackground(Color.WHITE);
	        tabbedPane = new JTabbedPane();
	        tabbedPane.setFont(TAB_FONT);
	        tabbedPane.setBackground(Color.WHITE);
	        
	        // Tab Quản lý nhân viên
	        JPanel quanLyNVPanel = createQuanLyNhanVienPanel();
	        
	        // Tab Phân quyền
	        JPanel phanQuyenPanel = createPhanQuyenPanel();
	        
	        // Style cho TabbedPane
	        styleTabbedPane();
	        
	        // Thêm các tab
	        tabbedPane.addTab("Quản lý nhân viên", quanLyNVPanel);
	        tabbedPane.addTab("Phân quyền", phanQuyenPanel);
	        
	        // Thêm TabbedPane vào panel chính
	        add(tabbedPane, BorderLayout.CENTER);
	        
	        // Set màu nền trắng cho component chứa tab
	        tabbedPane.setOpaque(true);
	        tabbedPane.setBackground(Color.WHITE);
	        setOpaque(true);
	    }
	    
	    private void styleTabbedPane() {
	        tabbedPane.setUI(new BasicTabbedPaneUI() {
	            @Override
	            protected void installDefaults() {
	                super.installDefaults();
	                highlight = Color.WHITE;
	                lightHighlight = Color.WHITE;
	                shadow = Color.WHITE;
	                darkShadow = Color.WHITE;
	                focus = PRIMARY_COLOR;
	            }
	            
	            @Override
	            protected void paintTabBackground(Graphics g, int tabPlacement,
	                                           int tabIndex, int x, int y, int w, int h, 
	                                           boolean isSelected) {
	                Graphics2D g2d = (Graphics2D) g;
	                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
	                                   RenderingHints.VALUE_ANTIALIAS_ON);
	                
	                if (isSelected) {
	                    g2d.setColor(Color.WHITE);
	                } else {
	                    g2d.setColor(new Color(250, 250, 250));
	                }
	                g2d.fillRect(x, y, w, h);
	            }

	            @Override
	            protected void paintTabBorder(Graphics g, int tabPlacement, int tabIndex,
	                                        int x, int y, int w, int h, boolean isSelected) {
	                if (isSelected) {
	                    g.setColor(PRIMARY_COLOR);
	                    g.drawLine(x, y + h, x + w, y + h);
	                    // Vẽ line dày hơn
	                    g.drawLine(x, y + h - 1, x + w, y + h - 1);
	                }
	            }

	            @Override
	            protected void paintContentBorder(Graphics g, int tabPlacement, int selectedIndex) {
	                // Không vẽ border cho content area
	            }
	            
	            @Override
	            protected int calculateTabHeight(int tabPlacement, int tabIndex, int fontHeight) {
	                // Tăng chiều cao của tab
	                return super.calculateTabHeight(tabPlacement, tabIndex, fontHeight) + 10;
	            }
	            
	            @Override
	            protected int getTabLabelShiftY(int tabPlacement, int tabIndex, boolean isSelected) {
	                // Điều chỉnh vị trí của text trong tab
	                return 0;
	            }
	        });
	        
	        // Thêm padding cho tabs
	        tabbedPane.setBorder(new EmptyBorder(10, 10, 10, 10));
	    }

	    private JPanel createQuanLyNhanVienPanel() {
	        JPanel panel = new JPanel(new BorderLayout(0, 20));
	        panel.setBackground(Color.WHITE);
	        panel.setBorder(new EmptyBorder(30, 30, 30, 30));

	        // Thêm các components hiện có của form nhân viên
	        panel.add(createTopPanel(), BorderLayout.NORTH);
	        panel.add(createTablePanel(), BorderLayout.CENTER);

	        return panel;
	    }

	    private JPanel createPhanQuyenPanel() {
	        JPanel panel = new JPanel(new BorderLayout());
	        panel.setBackground(Color.WHITE);
	        
	        // Tạo table model cho bảng phân quyền
	        String[] columns = {"Mã quyền", "Tên quyền truy cập"};
	        DefaultTableModel quyenModel = new DefaultTableModel(columns, 0) {
	            @Override
	            public boolean isCellEditable(int row, int column) {
	                return false;
	            }
	        };
	        
	        // Tạo bảng phân quyền
	        JTable quyenTable = new JTable(quyenModel);
	        styleQuyenTable(quyenTable);
	        
	        // Panel chứa controls trên cùng
	        JPanel topControls = new JPanel(new BorderLayout(20, 0));
	        topControls.setBackground(Color.WHITE);
	        topControls.setBorder(new EmptyBorder(20, 30, 20, 30));
	        
	        // Search panel
	        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
	        searchPanel.setBackground(Color.WHITE);
	        
	        // Combo box "Tất cả"
	        JComboBox<String> filterCombo = new JComboBox<>(new String[]{"Tất cả"});
	        styleComboBox(filterCombo);
	        
	        // Search field
	        JTextField quyenSearchField = new JTextField(20);
	        styleTextField(quyenSearchField);
	        
	        JButton searchBtn = createRoundedButton("", "/icon/search.png", false);
	        
	        searchPanel.add(filterCombo);
	        searchPanel.add(quyenSearchField);
	        searchPanel.add(searchBtn);
	        
	        // Action buttons panel
	        JPanel actionPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
	        actionPanel.setBackground(Color.WHITE);
	        
	        JButton addQuyenBtn = createRoundedButton("Thêm quyền", "/icon/circle-plus.png", true);
	        addQuyenBtn.setBackground(PRIMARY_COLOR);
	        addQuyenBtn.setForeground(Color.WHITE);
	        addQuyenBtn.setPreferredSize(new Dimension(150, 38));
	        
	        JButton editBtn = createRoundedButton("Edit", "/icon/pencil.png", true);
	        JButton deleteBtn = createRoundedButton("Xóa", "/icon/trash.png", true);
	        JButton aboutBtn = createRoundedButton("About", "/icon/info.png", true);
	        JButton exportBtn = createRoundedButton("Xuất Excel", "/icon/printer.png", true);
	        exportBtn.setPreferredSize(new Dimension(150, 38));
	        
	        actionPanel.add(addQuyenBtn);
	        actionPanel.add(editBtn);
	        actionPanel.add(deleteBtn);
	        actionPanel.add(aboutBtn);
	        actionPanel.add(exportBtn);
	        
	        topControls.add(searchPanel, BorderLayout.WEST);
	        topControls.add(actionPanel, BorderLayout.EAST);
	        
	        // Scroll pane for table
	        JScrollPane scrollPane = new JScrollPane(quyenTable);
	        scrollPane.setBorder(new LineBorder(new Color(230, 230, 230)));
	        scrollPane.setBackground(Color.WHITE);
	        
	        // Add everything to main panel
	        panel.add(topControls, BorderLayout.NORTH);
	        panel.add(scrollPane, BorderLayout.CENTER);
	        
	        // Load sample data
	        loadSampleQuyenData(quyenModel);
	        
	        return panel;
	    }
	    
	    private void styleQuyenTable(JTable table) {
	        table.setFont(CONTENT_FONT);
	        table.setRowHeight(40);
	        table.setGridColor(new Color(230, 230, 230));
	        table.setShowVerticalLines(true);
	        table.setShowHorizontalLines(true);
	        table.setSelectionBackground(HOVER_COLOR);
	        table.setSelectionForeground(Color.BLACK);
	        
	        // Header styling
	        JTableHeader header = table.getTableHeader();
	        header.setFont(HEADER_FONT);
	        header.setBackground(Color.WHITE);
	        header.setForeground(Color.BLACK);
	        header.setBorder(new LineBorder(new Color(230, 230, 230)));
	        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
	        
	        // Center align for Mã quyền column
	        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
	        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
	        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
	        
	        // Set column widths
	        table.getColumnModel().getColumn(0).setPreferredWidth(150);
	        table.getColumnModel().getColumn(1).setPreferredWidth(450);
	    }
	    
	    private void styleTextField(JTextField field) {
	        field.setPreferredSize(new Dimension(200, 38));
	        field.setFont(CONTENT_FONT);
	        field.setBorder(BorderFactory.createCompoundBorder(
	            new LineBorder(new Color(230, 230, 230)),
	            new EmptyBorder(5, 10, 5, 10)
	        ));
	    }
	    
	    private void styleComboBox(JComboBox<String> comboBox) {
	        comboBox.setPreferredSize(new Dimension(100, 38));
	        comboBox.setFont(CONTENT_FONT);
	        comboBox.setBackground(Color.WHITE);
	        comboBox.setBorder(new LineBorder(new Color(230, 230, 230)));
	    }
	    
	    private void loadSampleQuyenData(DefaultTableModel model) {
	        String[][] sampleData = {
	            {"Q001", "Quản lí cửa hàng"},
	            {"Q002", "Quản lí nhân viên"},
	            {"Q003", "Quản lí kho"},
	            {"Q004", "Quản lí bán hàng"},
	            {"Q005", "Quản lí báo cáo"}
	        };
	        
	        for (String[] row : sampleData) {
	            model.addRow(row);
	        }
	    }
    private JButton createRoundedButton(String text, String iconPath, boolean withText) {
        JButton button = new JButton();
        button.setFont(CONTENT_FONT);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setBackground(Color.WHITE);
        button.setBorder(new LineBorder(new Color(230, 230, 230), 1));
        
        if (withText) {
            button.setText(text);
            button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
            button.setIconTextGap(10);
            button.setPreferredSize(new Dimension(120, 38));
        } else {
            button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
            button.setPreferredSize(new Dimension(38, 38));
        }
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (button.getBackground().equals(PRIMARY_COLOR)) return;
                button.setBackground(HOVER_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                if (button.getBackground().equals(PRIMARY_COLOR)) return;
                button.setBackground(Color.WHITE);
            }
        });
        
        return button;
    }

    private JPanel createTopPanel() {
        JPanel topPanel = new JPanel(new BorderLayout(20, 0));
        topPanel.setBackground(Color.WHITE);
        topPanel.setBorder(new EmptyBorder(0, 0, 20, 0));

        // Search panel
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
        searchPanel.setBackground(Color.WHITE);

        searchField = new JTextField();
        searchField.setPreferredSize(new Dimension(220, 35));
        searchField.setFont(CONTENT_FONT);
        searchField.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(230, 230, 230), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));

        JButton searchButton = createRoundedButton("", "/icon/search.png", false);
        
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                performSearch(searchField.getText());
            }
        });

        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        // Actions panel
        JPanel actionsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        actionsPanel.setBackground(Color.WHITE);

        JButton addButton = createRoundedButton("Thêm nhân viên", "/icon/circle-plus.png", true);
        addButton.setBackground(PRIMARY_COLOR);
        addButton.setForeground(Color.WHITE);
        addButton.setPreferredSize(new Dimension(160, 38));

        JButton editButton = createRoundedButton("Sửa", "/icon/pencil.png", true);
        JButton deleteButton = createRoundedButton("Xóa", "/icon/trash.png", true);

        addButton.addActionListener(e -> showAddDialog());
        editButton.addActionListener(e -> showEditDialog());
        deleteButton.addActionListener(e -> deleteEmployee());

        actionsPanel.add(addButton);
        actionsPanel.add(editButton);
        actionsPanel.add(deleteButton);

        topPanel.add(searchPanel, BorderLayout.WEST);
        topPanel.add(actionsPanel, BorderLayout.EAST);

        return topPanel;
    }

    private JPanel createTablePanel() {
        JPanel tablePanel = new JPanel(new BorderLayout(0, 15));
        tablePanel.setBackground(Color.WHITE);

        String[] columns = {"Mã NV", "Họ và tên", "Giới tính", "Ngày sinh", "SDT", "Email"};
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        table = new JTable(tableModel);
        table.setFont(CONTENT_FONT);
        table.setRowHeight(40);
        table.setGridColor(new Color(245, 245, 245));
        table.setSelectionBackground(HOVER_COLOR);
        table.setSelectionForeground(Color.BLACK);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        
        for (int i = 0; i < table.getColumnCount(); i++) {
            TableColumn column = table.getColumnModel().getColumn(i);
            if (i == 0 || i == 2 || i == 4) {
                column.setCellRenderer(centerRenderer);
            }
        }

        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(Color.WHITE);
        header.setForeground(Color.BLACK);
        
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                selectedRow = table.getSelectedRow();
            }
        });

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));

        tablePanel.add(scrollPane, BorderLayout.CENTER);
        return tablePanel;
    }

    private void showAddDialog() {
        ThemNhanVienDialog dialog = new ThemNhanVienDialog(
            (Frame) SwingUtilities.getWindowAncestor(this), 
            tableModel
        );
        dialog.setVisible(true);
    }

    private void showEditDialog() {
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một nhân viên để chỉnh sửa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        else {
        	 SuaNhanVienDialog dialog = new SuaNhanVienDialog(
        			 (Frame) SwingUtilities.getWindowAncestor(this), 
        		        tableModel,   // Model của bảng
        		        selectedRow   // Dòng đang chọn
        		    );
        		    dialog.setVisible(true);
        }
        // Hiển thị dialog chỉnh sửa
        // Có thể tái sử dụng ThemNhanVienDialog với dữ liệu có sẵn
    }

    private void deleteEmployee() {
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một nhân viên để xóa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc chắn muốn xóa nhân viên này?",
            "Xác nhận xóa",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            tableModel.removeRow(selectedRow);
            selectedRow = -1;
            JOptionPane.showMessageDialog(this,
                "Xóa nhân viên thành công!",
                "Thông báo",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void performSearch(String searchText) {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
        table.setRowSorter(sorter);
        
        if (searchText.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
        }
    }
}