package gui;

import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.*;
import javax.swing.table.*;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;

import dialog.SuaNhanVienDialog;
import dialog.ThemNhanVienDialog;
import style.CustomScrollBarUI;
public class Form_NhanVien extends JPanel {
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 192, 203);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font("Arial", Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font("Arial", Font.PLAIN, 12);
    private static final Font TAB_FONT = new Font("Arial", Font.BOLD, 14);
    private JTabbedPane tabbedPane;
    private int selectedRow = -1;
    public Form_NhanVien() {
        setLayout(new BorderLayout());
        initComponents();
    }

    private void initComponents() {
        setBackground(Color.WHITE);
        tabbedPane = new JTabbedPane(JTabbedPane.TOP);
        tabbedPane.setFont(TAB_FONT);
        tabbedPane.setBackground(Color.WHITE);
        
        // Style cho tabbedPane
        styleTabbedPane();
        
        // Tạo các panel
        JPanel quanLyNVPanel = createTabPanel("Quản lý nhân viên", 
            new String[]{"Mã NV", "Họ và tên", "Giới tính", "Ngày sinh", "SDT", "Email"},
            createSampleEmployeeData());
        
        JPanel phanQuyenPanel = createTabPanel("Phân quyền", 
            new String[]{"Mã quyền", "Tên quyền truy cập"},
            createSamplePermissionData());
            
        JPanel taiKhoanPanel = createTabPanel("Tài khoản", 
            new String[]{"Mã NV", "Tên đăng nhập", "Nhóm quyền", "Trạng thái"},
            createSampleAccountData());
        
        // Thêm các tab
        tabbedPane.addTab("Quản lý nhân viên", quanLyNVPanel);
        tabbedPane.addTab("Phân quyền", phanQuyenPanel);
        tabbedPane.addTab("Tài khoản", taiKhoanPanel);
        
        // Set màu cho text của tab
        for(int i = 0; i < tabbedPane.getTabCount(); i++) {
            tabbedPane.setForegroundAt(i, new Color(50, 50, 50));
        }
        
        add(tabbedPane, BorderLayout.CENTER);
        setOpaque(true);
    }

    private JPanel createTabPanel(String title, String[] columns, Object[][] data) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        // Top Controls Panel
        JPanel topControls = new JPanel(new BorderLayout(20, 0));
        topControls.setBackground(Color.WHITE);
        topControls.setBorder(new EmptyBorder(20, 30, 20, 30));
        
        // Search panel
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        searchPanel.setBackground(Color.WHITE);
        
        JTextField searchField = new JTextField(20);
        styleTextField(searchField);
        
        JButton searchBtn = createIconButton("/icon/search.png");
        
        searchPanel.add(searchField);
        searchPanel.add(searchBtn);
        
        // Action buttons panel
        JPanel actionPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        actionPanel.setBackground(Color.WHITE);
        
        String addButtonText = "Thêm " + (title.contains("quyền") ? "quyền" : 
                             title.contains("tài khoản") ? "tài khoản" : "nhân viên");
        
        JButton addBtn = createActionButton(addButtonText, "/icon/circle-plus.png", true);
        JButton editBtn = createActionButton("Sửa", "/icon/pencil.png", false);
        JButton deleteBtn = createActionButton("Xóa", "/icon/trash.png", false);
        JButton aboutBtn = createActionButton("About", "/icon/info.png", false);
        JButton exportBtn = createActionButton("Xuất Excel", "/icon/printer.png", false);
        
        actionPanel.add(addBtn);
        actionPanel.add(editBtn);
        actionPanel.add(deleteBtn);
        actionPanel.add(aboutBtn);
        actionPanel.add(exportBtn);
        
        topControls.add(searchPanel, BorderLayout.WEST);
        topControls.add(actionPanel, BorderLayout.EAST);
        
        // Table
        DefaultTableModel tableModel = new DefaultTableModel(data, columns) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        JTable table = new JTable(tableModel);
        styleTable(table);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.getVerticalScrollBar().setUI(new CustomScrollBarUI());
        // Add components to panel
        JPanel mainContent = new JPanel(new BorderLayout());
        mainContent.setBackground(Color.WHITE);
        mainContent.setBorder(new EmptyBorder(0, 30, 30, 30));
        mainContent.add(scrollPane, BorderLayout.CENTER);
        
        panel.add(topControls, BorderLayout.NORTH);
        panel.add(mainContent, BorderLayout.CENTER);
        
        return panel;
    }

    private void styleTable(JTable table) {
        table.setFont(CONTENT_FONT);
        table.setRowHeight(40);
        table.setGridColor(new Color(240, 240, 240));
        table.setShowVerticalLines(true);
        table.setShowHorizontalLines(true);
        table.setSelectionBackground(HOVER_COLOR);
        table.setSelectionForeground(Color.BLACK);
        table.setBackground(Color.WHITE);
        
        // Header styling
        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(new Color(255, 240, 245));
        header.setForeground(Color.BLACK);
        header.setBorder(new LineBorder(new Color(240, 240, 240)));
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
        
        // Center align for first column and status/gender columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        
        // Additional center alignment for specific columns based on table type
        if (table.getColumnCount() > 2) {
            if (table.getColumnName(2).equals("Giới tính")) {
                table.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
            }
            if (table.getColumnName(3).equals("Trạng thái")) {
                table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
            }
        }
    }


    private void styleTextField(JTextField field) {
        field.setPreferredSize(new Dimension(200, 38));
        field.setFont(CONTENT_FONT);
        field.setBorder(BorderFactory.createCompoundBorder(
            new LineBorder(new Color(240, 240, 240)),
            new EmptyBorder(5, 10, 5, 10)
        ));
    }

    private JButton createIconButton(String iconPath) {
        JButton button = new JButton(new ImageIcon(getClass().getResource(iconPath)));
        button.setPreferredSize(new Dimension(38, 38));
        button.setBackground(Color.WHITE);
        button.setBorder(new LineBorder(new Color(240, 240, 240)));
        button.setFocusPainted(false);
        styleButtonHover(button);
        return button;
    }

    private JButton createActionButton(String text, String iconPath, boolean isPrimary) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
        button.setIconTextGap(10);
        button.setPreferredSize(new Dimension(text.length() > 10 ? 150 : 120, 38));
        button.setFocusPainted(false);
        
        if (isPrimary) {
            button.setBackground(PRIMARY_COLOR);
            button.setForeground(Color.WHITE);
            button.setBorder(new LineBorder(PRIMARY_COLOR));
        } else {
            button.setBackground(Color.WHITE);
            button.setForeground(Color.BLACK);
            button.setBorder(new LineBorder(new Color(240, 240, 240)));
            styleButtonHover(button);
        }
        
        return button;
    }

    private void styleButtonHover(JButton button) {
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (!button.getBackground().equals(PRIMARY_COLOR)) {
                    button.setBackground(HOVER_COLOR);
                }
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                if (!button.getBackground().equals(PRIMARY_COLOR)) {
                    button.setBackground(Color.WHITE);
                }
            }
        });
    }

    // Sample data methods
    private Object[][] createSampleEmployeeData() {
        return new Object[][] {
            {"NV001", "Nguyễn Văn A", "Nam", "1990-01-01", "0123456789", "nva@email.com"},
            {"NV002", "Trần Thị B", "Nữ", "1992-02-02", "0987654321", "ttb@email.com"}
        };
    }

    private Object[][] createSamplePermissionData() {
        return new Object[][] {
            {"Q001", "Quản lí cửa hàng"},
            {"Q002", "Quản lí nhân viên"},
            {"Q003", "Quản lí kho"},
            {"Q004", "Quản lí bán hàng"},
            {"Q005", "Quản lí báo cáo"}
        };
    }

    private Object[][] createSampleAccountData() {
        return new Object[][] {
            {"NV001", "admin", "Quản lí", "Đang hoạt động"},
            {"NV002", "user", "Nhân viên", "Đang hoạt động"}
        };
    }
    

    // Event handlers
    private void handleSearch(String searchText, JTable table) {
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(table.getModel());
        table.setRowSorter(sorter);
        
        if (searchText.trim().isEmpty()) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
        }
    }

    private void handleAdd(String tabTitle) {
        String message = "Thêm mới " + 
            (tabTitle.contains("nhân viên") ? "nhân viên" : 
             tabTitle.contains("quyền") ? "quyền" : "tài khoản");
             
        JOptionPane.showMessageDialog(this, 
            "Chức năng " + message + " sẽ được thực hiện tại đây",
            message,
            JOptionPane.INFORMATION_MESSAGE);
    }

    private void handleEdit(JTable table, String tabTitle) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một dòng để chỉnh sửa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String message = "Chỉnh sửa " + 
            (tabTitle.contains("nhân viên") ? "nhân viên" : 
             tabTitle.contains("quyền") ? "quyền" : "tài khoản");
             
        JOptionPane.showMessageDialog(this, 
            "Chức năng " + message + " sẽ được thực hiện tại đây",
            message,
            JOptionPane.INFORMATION_MESSAGE);
    }

    private void handleDelete(JTable table, String tabTitle) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng chọn một dòng để xóa",
                "Thông báo",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String itemType = tabTitle.contains("nhân viên") ? "nhân viên" : 
                         tabTitle.contains("quyền") ? "quyền" : "tài khoản";
                         
        int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc chắn muốn xóa " + itemType + " này?",
            "Xác nhận xóa",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.removeRow(table.convertRowIndexToModel(selectedRow));
            JOptionPane.showMessageDialog(this,
                "Xóa " + itemType + " thành công!",
                "Thông báo",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void handleExport(String tabTitle) {
        String message = "Xuất Excel cho " + 
            (tabTitle.contains("nhân viên") ? "danh sách nhân viên" : 
             tabTitle.contains("quyền") ? "danh sách quyền" : "danh sách tài khoản");
             
        JOptionPane.showMessageDialog(this, 
            "Chức năng " + message + " sẽ được thực hiện tại đây",
            "Xuất Excel",
            JOptionPane.INFORMATION_MESSAGE);
    }

    private void handleAbout(String tabTitle) {
        String message = "Thông tin về quản lý " + 
            (tabTitle.contains("nhân viên") ? "nhân viên" : 
             tabTitle.contains("quyền") ? "quyền" : "tài khoản");
             
        JOptionPane.showMessageDialog(this, 
            message,
            "Thông tin",
            JOptionPane.INFORMATION_MESSAGE);
    }

    // Custom cell renderers
    private class StatusColumnRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, column);
            
            if (value != null) {
                String status = value.toString();
                if (status.equals("Đang hoạt động")) {
                    setForeground(new Color(40, 167, 69));
                } else {
                    setForeground(new Color(220, 53, 69));
                }
            }
            
            setHorizontalAlignment(JLabel.CENTER);
            return c;
        }
    }

    private class CenterAlignRenderer extends DefaultTableCellRenderer {
        public CenterAlignRenderer() {
            setHorizontalAlignment(JLabel.CENTER);
        }
    }

}