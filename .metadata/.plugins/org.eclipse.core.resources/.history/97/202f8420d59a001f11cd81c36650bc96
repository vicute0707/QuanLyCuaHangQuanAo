package dialog;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.*;
import java.io.File;

public class ThemSanPham extends JDialog {
    // Định nghĩa màu sắc và font chung
    private static final Color PASTEL_PINK = new Color(255,255,255); 
    private static final Color DARK_PINK = new Color(219, 39, 119);    
    private static final Color LIGHT_PINK = new Color(252, 231, 243);  
    private static final Font TITLE_FONT = new Font("Arial", Font.BOLD, 24);
    private static final Font LABEL_FONT = new Font("Segoe UI", Font.PLAIN, 14);
    private static final Font INPUT_FONT = new Font("Segoe UI", Font.PLAIN, 14);
    private static final Font BUTTON_FONT = new Font("Segoe UI", Font.BOLD, 14);
    
    private JTextField txtMaSP, txtTenSP, txtDanhMuc, txtTonKho, txtGiaBan, txtGiaNhap, txtThuongHieu;
    private JTextArea txtMoTa;
    private JLabel lblImage;
    private String imagePath = "";
    private boolean isConfirmed = false;
    private boolean isEditMode = false;
    
    public ThemSanPham(Frame owner) {
        super(owner, "Thêm Sản Phẩm Mới", true);
        isEditMode = false;
        initComponents();
    }

    // Constructor for edit mode
    public ThemSanPham(Frame owner, String maSP, boolean isEdit) {
        super(owner, "Chỉnh Sửa Sản Phẩm", true);
        isEditMode = isEdit;
        initComponents();
        if (isEditMode) {
            txtMaSP.setText(maSP);
            txtMaSP.setEditable(false);
        }
    }

    private void initComponents() {
        setLayout(new BorderLayout());
        setBackground(PASTEL_PINK);
        getRootPane().setBackground(PASTEL_PINK);
        
        // Main Panel
        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBackground(PASTEL_PINK);
        mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
    
        // Title với style mới
        JLabel titleLabel = new JLabel(isEditMode ? "CHỈNH SỬA SẢN PHẨM" : "THÊM SẢN PHẨM MỚI");
        titleLabel.setFont(TITLE_FONT);
        titleLabel.setForeground(DARK_PINK);
        titleLabel.setBackground(Color.white);
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        JPanel panelNorth = new JPanel();
        panelNorth.setBackground(Color.white);
        panelNorth.add(titleLabel);

        // Content Panel
        JPanel contentPanel = new JPanel(new GridBagLayout());
        contentPanel.setBackground(PASTEL_PINK);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);

        // Image Panel với style mới
        JPanel imagePanel = new JPanel(new BorderLayout(0, 10));
        imagePanel.setBackground(PASTEL_PINK);
        TitledBorder imageBorder = new TitledBorder("Hình ảnh sản phẩm");
        imageBorder.setTitleFont(LABEL_FONT);
        imagePanel.setBorder(BorderFactory.createCompoundBorder(
            imageBorder,
            new EmptyBorder(10, 10, 10, 10)
        ));
        
        lblImage = new JLabel();
        lblImage.setPreferredSize(new Dimension(200, 200));
        lblImage.setBorder(BorderFactory.createLineBorder(DARK_PINK, 2));
        lblImage.setHorizontalAlignment(SwingConstants.CENTER);
        lblImage.setBackground(Color.WHITE);
        lblImage.setOpaque(true);
        
        JButton btnChooseImage = createStyledButton("Đổi ảnh", DARK_PINK);
        btnChooseImage.addActionListener(e -> chooseImage());
        
        imagePanel.add(lblImage, BorderLayout.CENTER);
        imagePanel.add(btnChooseImage, BorderLayout.SOUTH);

        // Form Panel với style mới
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBackground(PASTEL_PINK);
        formPanel.setBorder(new EmptyBorder(0, 20, 0, 0));

        // Initialize components với font mới
        txtMaSP = createStyledTextField();
        txtTenSP = createStyledTextField();
        txtDanhMuc = createStyledTextField();
        txtTonKho = createStyledTextField();
        txtGiaBan = createStyledTextField();
        txtGiaNhap = createStyledTextField();
        txtThuongHieu = createStyledTextField();
        
        txtMoTa = new JTextArea(4, 20);
        txtMoTa.setFont(INPUT_FONT);
        txtMoTa.setBackground(Color.WHITE);
        txtMoTa.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(DARK_PINK),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        txtMoTa.setLineWrap(true);
        txtMoTa.setWrapStyleWord(true);

        // Add components to form panel với label style mới
        addFormRow(formPanel, "Mã sản phẩm:", txtMaSP, 0);
        addFormRow(formPanel, "Tên sản phẩm:", txtTenSP, 1);
        addFormRow(formPanel, "Danh mục:", txtDanhMuc, 2);
        addFormRow(formPanel, "Tồn kho:", txtTonKho, 3);
        addFormRow(formPanel, "Giá bán:", txtGiaBan, 4);
        addFormRow(formPanel, "Giá nhập:", txtGiaNhap, 5);
        addFormRow(formPanel, "Thương hiệu:", txtThuongHieu, 6);
        addFormRow(formPanel, "Mô tả:", new JScrollPane(txtMoTa), 7);

        // Button Panel với style mới
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 15));
        buttonPanel.setBackground(PASTEL_PINK);

        JButton btnSave = createStyledButton(isEditMode ? "Cập nhật" : "Lưu", DARK_PINK);
        JButton btnCancel = createStyledButton("Hủy bỏ", new Color(255, 182, 193));
        
        btnSave.addActionListener(e -> {
            if (validateInput()) {
                isConfirmed = true;
                dispose();
            }
        });
        btnCancel.addActionListener(e -> dispose());

        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);

        // Layout assembly
        JPanel centerPanel = new JPanel(new GridBagLayout());
        centerPanel.setBackground(PASTEL_PINK);
        
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.3;
        gbc.weighty = 1;
        gbc.fill = GridBagConstraints.BOTH;
        centerPanel.add(imagePanel, gbc);

        gbc.gridx = 1;
        gbc.weightx = 0.7;
        centerPanel.add(formPanel, gbc);

        // Add all panels to dialog
        add(panelNorth, BorderLayout.NORTH);
        add(centerPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        // Final dialog setup
        setSize(800, 700);
        setLocationRelativeTo(getOwner());
    }

    private boolean validateInput() {
        // Validate required fields
        if (txtTenSP.getText().trim().isEmpty() ||
            txtDanhMuc.getText().trim().isEmpty() ||
            txtTonKho.getText().trim().isEmpty() ||
            txtGiaBan.getText().trim().isEmpty() ||
            txtGiaNhap.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Vui lòng điền đầy đủ thông tin bắt buộc",
                "Lỗi",
                JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // Validate numeric fields
        try {
            Integer.parseInt(txtTonKho.getText().trim());
            Double.parseDouble(txtGiaBan.getText().trim().replace(",", "").replace("vnd", "").trim());
            Double.parseDouble(txtGiaNhap.getText().trim().replace(",", "").replace("vnd", "").trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                "Giá trị không hợp lệ cho số lượng hoặc giá",
                "Lỗi",
                JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    // Existing helper methods remain the same
    private JTextField createStyledTextField() {
		return txtDanhMuc; /* ... */ }
    private JButton createStyledButton(String text, Color bgColor) {
		return null; /* ... */ }
    private void addFormRow(JPanel panel, String labelText, JComponent component, int row) { /* ... */ }
    private void chooseImage() { /* ... */ }

    // Getters and setters
    public boolean isConfirmed() { return isConfirmed; }
    public String getImagePath() { return imagePath; }
    public String getMaSP() { return txtMaSP.getText(); }
    public String getTenSP() { return txtTenSP.getText(); }
    public String getDanhMuc() { return txtDanhMuc.getText(); }
    public String getTonKho() { return txtTonKho.getText(); }
    public String getGiaBan() { return txtGiaBan.getText(); }
    public String getGiaNhap() { return txtGiaNhap.getText(); }
    public String getThuongHieu() { return txtThuongHieu.getText(); }
    public String getMoTa() { return txtMoTa.getText(); }

    // Setters for populating fields in edit mode
    public void setMaSP(String maSP) { txtMaSP.setText(maSP); }
    public void setTenSP(String tenSP) { txtTenSP.setText(tenSP); }
    public void setDanhMuc(String danhMuc) { txtDanhMuc.setText(danhMuc); }
    public void setTonKho(String tonKho) { txtTonKho.setText(tonKho); }
    public void setGiaBan(String giaBan) { txtGiaBan.setText(giaBan); }
    public void setGiaNhap(String giaNhap) { txtGiaNhap.setText(giaNhap); }
    public void setThuongHieu(String thuongHieu) { txtThuongHieu.setText(thuongHieu); }
    public void setMoTa(String moTa) { txtMoTa.setText(moTa); }
    
    // Method to set image
    public void setImage(ImageIcon icon) {
        if (icon != null) {
            Image image = icon.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH);
            lblImage.setIcon(new ImageIcon(image));
        } else {
            lblImage.setIcon(null);
        }
    }
}